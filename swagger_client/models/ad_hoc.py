# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdHoc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'pattern': 'str',
        'run_as_admin': 'bool',
        'run_as': 'str',
        'created_by': 'str',
        'date_created': 'datetime',
        'task': 'str',
        'hosts': 'list[str]',
        'tasks': 'str',
        'options': 'str',
        'become': 'str',
        'short_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pattern': 'pattern',
        'run_as_admin': 'run_as_admin',
        'run_as': 'run_as',
        'created_by': 'created_by',
        'date_created': 'date_created',
        'task': 'task',
        'hosts': 'hosts',
        'tasks': 'tasks',
        'options': 'options',
        'become': 'become',
        'short_id': 'short_id'
    }

    def __init__(self, id=None, pattern=None, run_as_admin=None, run_as=None, created_by=None, date_created=None, task=None, hosts=None, tasks=None, options=None, become=None, short_id=None):  # noqa: E501
        """AdHoc - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._pattern = None
        self._run_as_admin = None
        self._run_as = None
        self._created_by = None
        self._date_created = None
        self._task = None
        self._hosts = None
        self._tasks = None
        self._options = None
        self._become = None
        self._short_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if pattern is not None:
            self.pattern = pattern
        if run_as_admin is not None:
            self.run_as_admin = run_as_admin
        if run_as is not None:
            self.run_as = run_as
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        self.task = task
        self.hosts = hosts
        if tasks is not None:
            self.tasks = tasks
        if options is not None:
            self.options = options
        if become is not None:
            self.become = become
        if short_id is not None:
            self.short_id = short_id

    @property
    def id(self):
        """Gets the id of this AdHoc.  # noqa: E501


        :return: The id of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdHoc.


        :param id: The id of this AdHoc.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pattern(self):
        """Gets the pattern of this AdHoc.  # noqa: E501


        :return: The pattern of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this AdHoc.


        :param pattern: The pattern of this AdHoc.  # noqa: E501
        :type: str
        """
        if pattern is not None and len(pattern) > 64:
            raise ValueError("Invalid value for `pattern`, length must be less than or equal to `64`")  # noqa: E501
        if pattern is not None and len(pattern) < 1:
            raise ValueError("Invalid value for `pattern`, length must be greater than or equal to `1`")  # noqa: E501

        self._pattern = pattern

    @property
    def run_as_admin(self):
        """Gets the run_as_admin of this AdHoc.  # noqa: E501


        :return: The run_as_admin of this AdHoc.  # noqa: E501
        :rtype: bool
        """
        return self._run_as_admin

    @run_as_admin.setter
    def run_as_admin(self, run_as_admin):
        """Sets the run_as_admin of this AdHoc.


        :param run_as_admin: The run_as_admin of this AdHoc.  # noqa: E501
        :type: bool
        """

        self._run_as_admin = run_as_admin

    @property
    def run_as(self):
        """Gets the run_as of this AdHoc.  # noqa: E501


        :return: The run_as of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._run_as

    @run_as.setter
    def run_as(self, run_as):
        """Sets the run_as of this AdHoc.


        :param run_as: The run_as of this AdHoc.  # noqa: E501
        :type: str
        """
        if run_as is not None and len(run_as) > 64:
            raise ValueError("Invalid value for `run_as`, length must be less than or equal to `64`")  # noqa: E501
        if run_as is not None and len(run_as) < 1:
            raise ValueError("Invalid value for `run_as`, length must be greater than or equal to `1`")  # noqa: E501

        self._run_as = run_as

    @property
    def created_by(self):
        """Gets the created_by of this AdHoc.  # noqa: E501


        :return: The created_by of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AdHoc.


        :param created_by: The created_by of this AdHoc.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 64:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `64`")  # noqa: E501
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this AdHoc.  # noqa: E501


        :return: The date_created of this AdHoc.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AdHoc.


        :param date_created: The date_created of this AdHoc.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def task(self):
        """Gets the task of this AdHoc.  # noqa: E501


        :return: The task of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this AdHoc.


        :param task: The task of this AdHoc.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def hosts(self):
        """Gets the hosts of this AdHoc.  # noqa: E501


        :return: The hosts of this AdHoc.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this AdHoc.


        :param hosts: The hosts of this AdHoc.  # noqa: E501
        :type: list[str]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")  # noqa: E501

        self._hosts = hosts

    @property
    def tasks(self):
        """Gets the tasks of this AdHoc.  # noqa: E501


        :return: The tasks of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this AdHoc.


        :param tasks: The tasks of this AdHoc.  # noqa: E501
        :type: str
        """

        self._tasks = tasks

    @property
    def options(self):
        """Gets the options of this AdHoc.  # noqa: E501


        :return: The options of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AdHoc.


        :param options: The options of this AdHoc.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def become(self):
        """Gets the become of this AdHoc.  # noqa: E501


        :return: The become of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._become

    @become.setter
    def become(self, become):
        """Sets the become of this AdHoc.


        :param become: The become of this AdHoc.  # noqa: E501
        :type: str
        """

        self._become = become

    @property
    def short_id(self):
        """Gets the short_id of this AdHoc.  # noqa: E501


        :return: The short_id of this AdHoc.  # noqa: E501
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this AdHoc.


        :param short_id: The short_id of this AdHoc.  # noqa: E501
        :type: str
        """

        self._short_id = short_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdHoc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
