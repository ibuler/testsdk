# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommandExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hosts': 'list[str]',
        'run_as': 'str',
        'command': 'str',
        'result': 'str',
        'log_url': 'str',
        'is_finished': 'bool',
        'date_created': 'datetime',
        'date_finished': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'hosts': 'hosts',
        'run_as': 'run_as',
        'command': 'command',
        'result': 'result',
        'log_url': 'log_url',
        'is_finished': 'is_finished',
        'date_created': 'date_created',
        'date_finished': 'date_finished'
    }

    def __init__(self, id=None, hosts=None, run_as=None, command=None, result=None, log_url=None, is_finished=None, date_created=None, date_finished=None):  # noqa: E501
        """CommandExecution - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._hosts = None
        self._run_as = None
        self._command = None
        self._result = None
        self._log_url = None
        self._is_finished = None
        self._date_created = None
        self._date_finished = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.hosts = hosts
        self.run_as = run_as
        self.command = command
        if result is not None:
            self.result = result
        if log_url is not None:
            self.log_url = log_url
        if is_finished is not None:
            self.is_finished = is_finished
        if date_created is not None:
            self.date_created = date_created
        if date_finished is not None:
            self.date_finished = date_finished

    @property
    def id(self):
        """Gets the id of this CommandExecution.  # noqa: E501


        :return: The id of this CommandExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommandExecution.


        :param id: The id of this CommandExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hosts(self):
        """Gets the hosts of this CommandExecution.  # noqa: E501


        :return: The hosts of this CommandExecution.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this CommandExecution.


        :param hosts: The hosts of this CommandExecution.  # noqa: E501
        :type: list[str]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")  # noqa: E501

        self._hosts = hosts

    @property
    def run_as(self):
        """Gets the run_as of this CommandExecution.  # noqa: E501


        :return: The run_as of this CommandExecution.  # noqa: E501
        :rtype: str
        """
        return self._run_as

    @run_as.setter
    def run_as(self, run_as):
        """Sets the run_as of this CommandExecution.


        :param run_as: The run_as of this CommandExecution.  # noqa: E501
        :type: str
        """
        if run_as is None:
            raise ValueError("Invalid value for `run_as`, must not be `None`")  # noqa: E501

        self._run_as = run_as

    @property
    def command(self):
        """Gets the command of this CommandExecution.  # noqa: E501


        :return: The command of this CommandExecution.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this CommandExecution.


        :param command: The command of this CommandExecution.  # noqa: E501
        :type: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501
        if command is not None and len(command) < 1:
            raise ValueError("Invalid value for `command`, length must be greater than or equal to `1`")  # noqa: E501

        self._command = command

    @property
    def result(self):
        """Gets the result of this CommandExecution.  # noqa: E501


        :return: The result of this CommandExecution.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CommandExecution.


        :param result: The result of this CommandExecution.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def log_url(self):
        """Gets the log_url of this CommandExecution.  # noqa: E501


        :return: The log_url of this CommandExecution.  # noqa: E501
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this CommandExecution.


        :param log_url: The log_url of this CommandExecution.  # noqa: E501
        :type: str
        """

        self._log_url = log_url

    @property
    def is_finished(self):
        """Gets the is_finished of this CommandExecution.  # noqa: E501


        :return: The is_finished of this CommandExecution.  # noqa: E501
        :rtype: bool
        """
        return self._is_finished

    @is_finished.setter
    def is_finished(self, is_finished):
        """Sets the is_finished of this CommandExecution.


        :param is_finished: The is_finished of this CommandExecution.  # noqa: E501
        :type: bool
        """

        self._is_finished = is_finished

    @property
    def date_created(self):
        """Gets the date_created of this CommandExecution.  # noqa: E501


        :return: The date_created of this CommandExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CommandExecution.


        :param date_created: The date_created of this CommandExecution.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_finished(self):
        """Gets the date_finished of this CommandExecution.  # noqa: E501


        :return: The date_finished of this CommandExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """Sets the date_finished of this CommandExecution.


        :param date_finished: The date_finished of this CommandExecution.  # noqa: E501
        :type: datetime
        """

        self._date_finished = date_finished

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
