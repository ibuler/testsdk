# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoteApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'asset': 'str',
        'system_user': 'str',
        'type': 'str',
        'path': 'str',
        'params': 'dict(str, str)',
        'comment': 'str',
        'created_by': 'str',
        'date_created': 'datetime',
        'asset_info': 'str',
        'system_user_info': 'str',
        'get_type_display': 'str',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'asset': 'asset',
        'system_user': 'system_user',
        'type': 'type',
        'path': 'path',
        'params': 'params',
        'comment': 'comment',
        'created_by': 'created_by',
        'date_created': 'date_created',
        'asset_info': 'asset_info',
        'system_user_info': 'system_user_info',
        'get_type_display': 'get_type_display',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, name=None, asset=None, system_user=None, type=None, path=None, params=None, comment=None, created_by=None, date_created=None, asset_info=None, system_user_info=None, get_type_display=None, org_id='', org_name=None):  # noqa: E501
        """RemoteApp - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._asset = None
        self._system_user = None
        self._type = None
        self._path = None
        self._params = None
        self._comment = None
        self._created_by = None
        self._date_created = None
        self._asset_info = None
        self._system_user_info = None
        self._get_type_display = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.asset = asset
        self.system_user = system_user
        if type is not None:
            self.type = type
        self.path = path
        self.params = params
        if comment is not None:
            self.comment = comment
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if asset_info is not None:
            self.asset_info = asset_info
        if system_user_info is not None:
            self.system_user_info = system_user_info
        if get_type_display is not None:
            self.get_type_display = get_type_display
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this RemoteApp.  # noqa: E501


        :return: The id of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteApp.


        :param id: The id of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteApp.  # noqa: E501


        :return: The name of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteApp.


        :param name: The name of this RemoteApp.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def asset(self):
        """Gets the asset of this RemoteApp.  # noqa: E501


        :return: The asset of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this RemoteApp.


        :param asset: The asset of this RemoteApp.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def system_user(self):
        """Gets the system_user of this RemoteApp.  # noqa: E501


        :return: The system_user of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this RemoteApp.


        :param system_user: The system_user of this RemoteApp.  # noqa: E501
        :type: str
        """
        if system_user is None:
            raise ValueError("Invalid value for `system_user`, must not be `None`")  # noqa: E501

        self._system_user = system_user

    @property
    def type(self):
        """Gets the type of this RemoteApp.  # noqa: E501


        :return: The type of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoteApp.


        :param type: The type of this RemoteApp.  # noqa: E501
        :type: str
        """
        allowed_values = ["chrome", "mysql_workbench", "vmware_client", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def path(self):
        """Gets the path of this RemoteApp.  # noqa: E501


        :return: The path of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RemoteApp.


        :param path: The path of this RemoteApp.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if path is not None and len(path) > 128:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `128`")  # noqa: E501
        if path is not None and len(path) < 1:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def params(self):
        """Gets the params of this RemoteApp.  # noqa: E501


        :return: The params of this RemoteApp.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this RemoteApp.


        :param params: The params of this RemoteApp.  # noqa: E501
        :type: dict(str, str)
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def comment(self):
        """Gets the comment of this RemoteApp.  # noqa: E501


        :return: The comment of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RemoteApp.


        :param comment: The comment of this RemoteApp.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 128:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `128`")  # noqa: E501

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this RemoteApp.  # noqa: E501


        :return: The created_by of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RemoteApp.


        :param created_by: The created_by of this RemoteApp.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this RemoteApp.  # noqa: E501


        :return: The date_created of this RemoteApp.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RemoteApp.


        :param date_created: The date_created of this RemoteApp.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def asset_info(self):
        """Gets the asset_info of this RemoteApp.  # noqa: E501


        :return: The asset_info of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._asset_info

    @asset_info.setter
    def asset_info(self, asset_info):
        """Sets the asset_info of this RemoteApp.


        :param asset_info: The asset_info of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._asset_info = asset_info

    @property
    def system_user_info(self):
        """Gets the system_user_info of this RemoteApp.  # noqa: E501


        :return: The system_user_info of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._system_user_info

    @system_user_info.setter
    def system_user_info(self, system_user_info):
        """Sets the system_user_info of this RemoteApp.


        :param system_user_info: The system_user_info of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._system_user_info = system_user_info

    @property
    def get_type_display(self):
        """Gets the get_type_display of this RemoteApp.  # noqa: E501


        :return: The get_type_display of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._get_type_display

    @get_type_display.setter
    def get_type_display(self, get_type_display):
        """Sets the get_type_display of this RemoteApp.


        :param get_type_display: The get_type_display of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._get_type_display = get_type_display

    @property
    def org_id(self):
        """Gets the org_id of this RemoteApp.  # noqa: E501


        :return: The org_id of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this RemoteApp.


        :param org_id: The org_id of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this RemoteApp.  # noqa: E501


        :return: The org_name of this RemoteApp.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this RemoteApp.


        :param org_name: The org_name of this RemoteApp.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
