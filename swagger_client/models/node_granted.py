# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.asset_granted import AssetGranted  # noqa: F401,E501


class NodeGranted(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'key': 'str',
        'value': 'str',
        'org_id': 'str',
        'name': 'str',
        'assets_granted': 'list[AssetGranted]',
        'assets_amount': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'value': 'value',
        'org_id': 'org_id',
        'name': 'name',
        'assets_granted': 'assets_granted',
        'assets_amount': 'assets_amount'
    }

    def __init__(self, id=None, key=None, value=None, org_id=None, name=None, assets_granted=None, assets_amount=None):  # noqa: E501
        """NodeGranted - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._key = None
        self._value = None
        self._org_id = None
        self._name = None
        self._assets_granted = None
        self._assets_amount = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if value is not None:
            self.value = value
        if org_id is not None:
            self.org_id = org_id
        if name is not None:
            self.name = name
        if assets_granted is not None:
            self.assets_granted = assets_granted
        if assets_amount is not None:
            self.assets_amount = assets_amount

    @property
    def id(self):
        """Gets the id of this NodeGranted.  # noqa: E501


        :return: The id of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeGranted.


        :param id: The id of this NodeGranted.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this NodeGranted.  # noqa: E501


        :return: The key of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NodeGranted.


        :param key: The key of this NodeGranted.  # noqa: E501
        :type: str
        """
        if key is not None and len(key) < 1:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")  # noqa: E501

        self._key = key

    @property
    def value(self):
        """Gets the value of this NodeGranted.  # noqa: E501


        :return: The value of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NodeGranted.


        :param value: The value of this NodeGranted.  # noqa: E501
        :type: str
        """
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501

        self._value = value

    @property
    def org_id(self):
        """Gets the org_id of this NodeGranted.  # noqa: E501


        :return: The org_id of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this NodeGranted.


        :param org_id: The org_id of this NodeGranted.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) < 1:
            raise ValueError("Invalid value for `org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._org_id = org_id

    @property
    def name(self):
        """Gets the name of this NodeGranted.  # noqa: E501


        :return: The name of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeGranted.


        :param name: The name of this NodeGranted.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assets_granted(self):
        """Gets the assets_granted of this NodeGranted.  # noqa: E501


        :return: The assets_granted of this NodeGranted.  # noqa: E501
        :rtype: list[AssetGranted]
        """
        return self._assets_granted

    @assets_granted.setter
    def assets_granted(self, assets_granted):
        """Sets the assets_granted of this NodeGranted.


        :param assets_granted: The assets_granted of this NodeGranted.  # noqa: E501
        :type: list[AssetGranted]
        """

        self._assets_granted = assets_granted

    @property
    def assets_amount(self):
        """Gets the assets_amount of this NodeGranted.  # noqa: E501


        :return: The assets_amount of this NodeGranted.  # noqa: E501
        :rtype: str
        """
        return self._assets_amount

    @assets_amount.setter
    def assets_amount(self, assets_amount):
        """Sets the assets_amount of this NodeGranted.


        :param assets_amount: The assets_amount of this NodeGranted.  # noqa: E501
        :type: str
        """

        self._assets_amount = assets_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeGranted):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
