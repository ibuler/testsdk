# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SessionCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user': 'str',
        'asset': 'str',
        'system_user': 'str',
        'input': 'str',
        'output': 'str',
        'session': 'str',
        'org_id': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'asset': 'asset',
        'system_user': 'system_user',
        'input': 'input',
        'output': 'output',
        'session': 'session',
        'org_id': 'org_id',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, user=None, asset=None, system_user=None, input=None, output=None, session=None, org_id='', timestamp=None):  # noqa: E501
        """SessionCommand - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user = None
        self._asset = None
        self._system_user = None
        self._input = None
        self._output = None
        self._session = None
        self._org_id = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user = user
        self.asset = asset
        self.system_user = system_user
        self.input = input
        self.output = output
        self.session = session
        if org_id is not None:
            self.org_id = org_id
        self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this SessionCommand.  # noqa: E501


        :return: The id of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionCommand.


        :param id: The id of this SessionCommand.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this SessionCommand.  # noqa: E501


        :return: The user of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SessionCommand.


        :param user: The user of this SessionCommand.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501
        if user is not None and len(user) > 64:
            raise ValueError("Invalid value for `user`, length must be less than or equal to `64`")  # noqa: E501
        if user is not None and len(user) < 1:
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `1`")  # noqa: E501

        self._user = user

    @property
    def asset(self):
        """Gets the asset of this SessionCommand.  # noqa: E501


        :return: The asset of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this SessionCommand.


        :param asset: The asset of this SessionCommand.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501
        if asset is not None and len(asset) > 128:
            raise ValueError("Invalid value for `asset`, length must be less than or equal to `128`")  # noqa: E501
        if asset is not None and len(asset) < 1:
            raise ValueError("Invalid value for `asset`, length must be greater than or equal to `1`")  # noqa: E501

        self._asset = asset

    @property
    def system_user(self):
        """Gets the system_user of this SessionCommand.  # noqa: E501


        :return: The system_user of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this SessionCommand.


        :param system_user: The system_user of this SessionCommand.  # noqa: E501
        :type: str
        """
        if system_user is None:
            raise ValueError("Invalid value for `system_user`, must not be `None`")  # noqa: E501
        if system_user is not None and len(system_user) > 64:
            raise ValueError("Invalid value for `system_user`, length must be less than or equal to `64`")  # noqa: E501
        if system_user is not None and len(system_user) < 1:
            raise ValueError("Invalid value for `system_user`, length must be greater than or equal to `1`")  # noqa: E501

        self._system_user = system_user

    @property
    def input(self):
        """Gets the input of this SessionCommand.  # noqa: E501


        :return: The input of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this SessionCommand.


        :param input: The input of this SessionCommand.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501
        if input is not None and len(input) > 128:
            raise ValueError("Invalid value for `input`, length must be less than or equal to `128`")  # noqa: E501
        if input is not None and len(input) < 1:
            raise ValueError("Invalid value for `input`, length must be greater than or equal to `1`")  # noqa: E501

        self._input = input

    @property
    def output(self):
        """Gets the output of this SessionCommand.  # noqa: E501


        :return: The output of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this SessionCommand.


        :param output: The output of this SessionCommand.  # noqa: E501
        :type: str
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")  # noqa: E501
        if output is not None and len(output) > 1024:
            raise ValueError("Invalid value for `output`, length must be less than or equal to `1024`")  # noqa: E501

        self._output = output

    @property
    def session(self):
        """Gets the session of this SessionCommand.  # noqa: E501


        :return: The session of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this SessionCommand.


        :param session: The session of this SessionCommand.  # noqa: E501
        :type: str
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")  # noqa: E501
        if session is not None and len(session) > 36:
            raise ValueError("Invalid value for `session`, length must be less than or equal to `36`")  # noqa: E501
        if session is not None and len(session) < 1:
            raise ValueError("Invalid value for `session`, length must be greater than or equal to `1`")  # noqa: E501

        self._session = session

    @property
    def org_id(self):
        """Gets the org_id of this SessionCommand.  # noqa: E501


        :return: The org_id of this SessionCommand.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SessionCommand.


        :param org_id: The org_id of this SessionCommand.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) > 36:
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `36`")  # noqa: E501

        self._org_id = org_id

    @property
    def timestamp(self):
        """Gets the timestamp of this SessionCommand.  # noqa: E501


        :return: The timestamp of this SessionCommand.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SessionCommand.


        :param timestamp: The timestamp of this SessionCommand.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
