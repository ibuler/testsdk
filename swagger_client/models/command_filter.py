# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommandFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'org_id': 'str',
        'org_name': 'str',
        'is_active': 'bool',
        'comment': 'str',
        'created_by': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'rules': 'list[str]',
        'system_users': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'org_id': 'org_id',
        'org_name': 'org_name',
        'is_active': 'is_active',
        'comment': 'comment',
        'created_by': 'created_by',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'rules': 'rules',
        'system_users': 'system_users'
    }

    def __init__(self, id=None, name=None, org_id='', org_name=None, is_active=None, comment=None, created_by=None, date_created=None, date_updated=None, rules=None, system_users=None):  # noqa: E501
        """CommandFilter - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._org_id = None
        self._org_name = None
        self._is_active = None
        self._comment = None
        self._created_by = None
        self._date_created = None
        self._date_updated = None
        self._rules = None
        self._system_users = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name
        if is_active is not None:
            self.is_active = is_active
        if comment is not None:
            self.comment = comment
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if rules is not None:
            self.rules = rules
        if system_users is not None:
            self.system_users = system_users

    @property
    def id(self):
        """Gets the id of this CommandFilter.  # noqa: E501


        :return: The id of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommandFilter.


        :param id: The id of this CommandFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CommandFilter.  # noqa: E501


        :return: The name of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommandFilter.


        :param name: The name of this CommandFilter.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this CommandFilter.  # noqa: E501


        :return: The org_id of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CommandFilter.


        :param org_id: The org_id of this CommandFilter.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this CommandFilter.  # noqa: E501


        :return: The org_name of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this CommandFilter.


        :param org_name: The org_name of this CommandFilter.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def is_active(self):
        """Gets the is_active of this CommandFilter.  # noqa: E501


        :return: The is_active of this CommandFilter.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CommandFilter.


        :param is_active: The is_active of this CommandFilter.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def comment(self):
        """Gets the comment of this CommandFilter.  # noqa: E501


        :return: The comment of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CommandFilter.


        :param comment: The comment of this CommandFilter.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this CommandFilter.  # noqa: E501


        :return: The created_by of this CommandFilter.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CommandFilter.


        :param created_by: The created_by of this CommandFilter.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 128:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `128`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this CommandFilter.  # noqa: E501


        :return: The date_created of this CommandFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CommandFilter.


        :param date_created: The date_created of this CommandFilter.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this CommandFilter.  # noqa: E501


        :return: The date_updated of this CommandFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this CommandFilter.


        :param date_updated: The date_updated of this CommandFilter.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def rules(self):
        """Gets the rules of this CommandFilter.  # noqa: E501


        :return: The rules of this CommandFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CommandFilter.


        :param rules: The rules of this CommandFilter.  # noqa: E501
        :type: list[str]
        """

        self._rules = rules

    @property
    def system_users(self):
        """Gets the system_users of this CommandFilter.  # noqa: E501


        :return: The system_users of this CommandFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_users

    @system_users.setter
    def system_users(self, system_users):
        """Sets the system_users of this CommandFilter.


        :param system_users: The system_users of this CommandFilter.  # noqa: E501
        :type: list[str]
        """

        self._system_users = system_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
