# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'username': 'str',
        'password': 'str',
        'private_key': 'str',
        'public_key': 'str',
        'comment': 'str',
        'assets_amount': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'created_by': 'str',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'password': 'password',
        'private_key': 'private_key',
        'public_key': 'public_key',
        'comment': 'comment',
        'assets_amount': 'assets_amount',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'created_by': 'created_by',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, name=None, username=None, password=None, private_key=None, public_key=None, comment=None, assets_amount=None, date_created=None, date_updated=None, created_by=None, org_id='', org_name=None):  # noqa: E501
        """AdminUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._username = None
        self._password = None
        self._private_key = None
        self._public_key = None
        self._comment = None
        self._assets_amount = None
        self._date_created = None
        self._date_updated = None
        self._created_by = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if private_key is not None:
            self.private_key = private_key
        if public_key is not None:
            self.public_key = public_key
        if comment is not None:
            self.comment = comment
        if assets_amount is not None:
            self.assets_amount = assets_amount
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if created_by is not None:
            self.created_by = created_by
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this AdminUser.  # noqa: E501


        :return: The id of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminUser.


        :param id: The id of this AdminUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AdminUser.  # noqa: E501


        :return: The name of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminUser.


        :param name: The name of this AdminUser.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this AdminUser.  # noqa: E501


        :return: The username of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminUser.


        :param username: The username of this AdminUser.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and not re.search('^[0-9a-zA-Z_@\\-\\.]*$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[0-9a-zA-Z_@\\-\\.]*$/`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this AdminUser.  # noqa: E501


        :return: The password of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AdminUser.


        :param password: The password of this AdminUser.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 512:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `512`")  # noqa: E501

        self._password = password

    @property
    def private_key(self):
        """Gets the private_key of this AdminUser.  # noqa: E501


        :return: The private_key of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this AdminUser.


        :param private_key: The private_key of this AdminUser.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this AdminUser.  # noqa: E501


        :return: The public_key of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AdminUser.


        :param public_key: The public_key of this AdminUser.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def comment(self):
        """Gets the comment of this AdminUser.  # noqa: E501


        :return: The comment of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AdminUser.


        :param comment: The comment of this AdminUser.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def assets_amount(self):
        """Gets the assets_amount of this AdminUser.  # noqa: E501


        :return: The assets_amount of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._assets_amount

    @assets_amount.setter
    def assets_amount(self, assets_amount):
        """Sets the assets_amount of this AdminUser.


        :param assets_amount: The assets_amount of this AdminUser.  # noqa: E501
        :type: str
        """

        self._assets_amount = assets_amount

    @property
    def date_created(self):
        """Gets the date_created of this AdminUser.  # noqa: E501


        :return: The date_created of this AdminUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AdminUser.


        :param date_created: The date_created of this AdminUser.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this AdminUser.  # noqa: E501


        :return: The date_updated of this AdminUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AdminUser.


        :param date_updated: The date_updated of this AdminUser.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def created_by(self):
        """Gets the created_by of this AdminUser.  # noqa: E501


        :return: The created_by of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AdminUser.


        :param created_by: The created_by of this AdminUser.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def org_id(self):
        """Gets the org_id of this AdminUser.  # noqa: E501


        :return: The org_id of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AdminUser.


        :param org_id: The org_id of this AdminUser.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this AdminUser.  # noqa: E501


        :return: The org_name of this AdminUser.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this AdminUser.


        :param org_name: The org_name of this AdminUser.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
