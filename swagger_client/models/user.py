# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'username': 'str',
        'password': 'str',
        'email': 'str',
        'public_key': 'str',
        'groups': 'list[str]',
        'groups_display': 'str',
        'role': 'str',
        'role_display': 'str',
        'wechat': 'str',
        'phone': 'str',
        'otp_level': 'int',
        'comment': 'str',
        'source': 'str',
        'source_display': 'str',
        'is_valid': 'str',
        'is_expired': 'str',
        'is_active': 'bool',
        'created_by': 'str',
        'is_first_login': 'bool',
        'date_password_last_updated': 'datetime',
        'date_expired': 'datetime',
        'avatar_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'password': 'password',
        'email': 'email',
        'public_key': 'public_key',
        'groups': 'groups',
        'groups_display': 'groups_display',
        'role': 'role',
        'role_display': 'role_display',
        'wechat': 'wechat',
        'phone': 'phone',
        'otp_level': 'otp_level',
        'comment': 'comment',
        'source': 'source',
        'source_display': 'source_display',
        'is_valid': 'is_valid',
        'is_expired': 'is_expired',
        'is_active': 'is_active',
        'created_by': 'created_by',
        'is_first_login': 'is_first_login',
        'date_password_last_updated': 'date_password_last_updated',
        'date_expired': 'date_expired',
        'avatar_url': 'avatar_url'
    }

    def __init__(self, id=None, name=None, username=None, password=None, email=None, public_key=None, groups=None, groups_display=None, role=None, role_display=None, wechat=None, phone=None, otp_level=None, comment=None, source=None, source_display=None, is_valid=None, is_expired=None, is_active=None, created_by=None, is_first_login=None, date_password_last_updated=None, date_expired=None, avatar_url=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._username = None
        self._password = None
        self._email = None
        self._public_key = None
        self._groups = None
        self._groups_display = None
        self._role = None
        self._role_display = None
        self._wechat = None
        self._phone = None
        self._otp_level = None
        self._comment = None
        self._source = None
        self._source_display = None
        self._is_valid = None
        self._is_expired = None
        self._is_active = None
        self._created_by = None
        self._is_first_login = None
        self._date_password_last_updated = None
        self._date_expired = None
        self._avatar_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.username = username
        if password is not None:
            self.password = password
        self.email = email
        if public_key is not None:
            self.public_key = public_key
        if groups is not None:
            self.groups = groups
        if groups_display is not None:
            self.groups_display = groups_display
        if role is not None:
            self.role = role
        if role_display is not None:
            self.role_display = role_display
        if wechat is not None:
            self.wechat = wechat
        if phone is not None:
            self.phone = phone
        if otp_level is not None:
            self.otp_level = otp_level
        if comment is not None:
            self.comment = comment
        if source is not None:
            self.source = source
        if source_display is not None:
            self.source_display = source_display
        if is_valid is not None:
            self.is_valid = is_valid
        if is_expired is not None:
            self.is_expired = is_expired
        if is_active is not None:
            self.is_active = is_active
        if created_by is not None:
            self.created_by = created_by
        if is_first_login is not None:
            self.is_first_login = is_first_login
        if date_password_last_updated is not None:
            self.date_password_last_updated = date_password_last_updated
        if date_expired is not None:
            self.date_expired = date_expired
        if avatar_url is not None:
            self.avatar_url = avatar_url

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 128:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `128`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")  # noqa: E501

        self._password = password

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 128:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `128`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def public_key(self):
        """Gets the public_key of this User.  # noqa: E501


        :return: The public_key of this User.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this User.


        :param public_key: The public_key of this User.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501


        :return: The groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def groups_display(self):
        """Gets the groups_display of this User.  # noqa: E501


        :return: The groups_display of this User.  # noqa: E501
        :rtype: str
        """
        return self._groups_display

    @groups_display.setter
    def groups_display(self, groups_display):
        """Sets the groups_display of this User.


        :param groups_display: The groups_display of this User.  # noqa: E501
        :type: str
        """

        self._groups_display = groups_display

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501


        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["Admin", "User", "App", "Auditor"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def role_display(self):
        """Gets the role_display of this User.  # noqa: E501


        :return: The role_display of this User.  # noqa: E501
        :rtype: str
        """
        return self._role_display

    @role_display.setter
    def role_display(self, role_display):
        """Sets the role_display of this User.


        :param role_display: The role_display of this User.  # noqa: E501
        :type: str
        """

        self._role_display = role_display

    @property
    def wechat(self):
        """Gets the wechat of this User.  # noqa: E501


        :return: The wechat of this User.  # noqa: E501
        :rtype: str
        """
        return self._wechat

    @wechat.setter
    def wechat(self, wechat):
        """Sets the wechat of this User.


        :param wechat: The wechat of this User.  # noqa: E501
        :type: str
        """
        if wechat is not None and len(wechat) > 128:
            raise ValueError("Invalid value for `wechat`, length must be less than or equal to `128`")  # noqa: E501

        self._wechat = wechat

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501


        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.


        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")  # noqa: E501

        self._phone = phone

    @property
    def otp_level(self):
        """Gets the otp_level of this User.  # noqa: E501


        :return: The otp_level of this User.  # noqa: E501
        :rtype: int
        """
        return self._otp_level

    @otp_level.setter
    def otp_level(self, otp_level):
        """Sets the otp_level of this User.


        :param otp_level: The otp_level of this User.  # noqa: E501
        :type: int
        """

        self._otp_level = otp_level

    @property
    def comment(self):
        """Gets the comment of this User.  # noqa: E501


        :return: The comment of this User.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this User.


        :param comment: The comment of this User.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def source(self):
        """Gets the source of this User.  # noqa: E501


        :return: The source of this User.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this User.


        :param source: The source of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "ldap", "openid", "radius"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_display(self):
        """Gets the source_display of this User.  # noqa: E501


        :return: The source_display of this User.  # noqa: E501
        :rtype: str
        """
        return self._source_display

    @source_display.setter
    def source_display(self, source_display):
        """Sets the source_display of this User.


        :param source_display: The source_display of this User.  # noqa: E501
        :type: str
        """

        self._source_display = source_display

    @property
    def is_valid(self):
        """Gets the is_valid of this User.  # noqa: E501


        :return: The is_valid of this User.  # noqa: E501
        :rtype: str
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this User.


        :param is_valid: The is_valid of this User.  # noqa: E501
        :type: str
        """

        self._is_valid = is_valid

    @property
    def is_expired(self):
        """Gets the is_expired of this User.  # noqa: E501


        :return: The is_expired of this User.  # noqa: E501
        :rtype: str
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired):
        """Sets the is_expired of this User.


        :param is_expired: The is_expired of this User.  # noqa: E501
        :type: str
        """

        self._is_expired = is_expired

    @property
    def is_active(self):
        """Gets the is_active of this User.  # noqa: E501

        指明用户是否被认为活跃的。以反选代替删除帐号。  # noqa: E501

        :return: The is_active of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this User.

        指明用户是否被认为活跃的。以反选代替删除帐号。  # noqa: E501

        :param is_active: The is_active of this User.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def created_by(self):
        """Gets the created_by of this User.  # noqa: E501


        :return: The created_by of this User.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.


        :param created_by: The created_by of this User.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def is_first_login(self):
        """Gets the is_first_login of this User.  # noqa: E501


        :return: The is_first_login of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_login

    @is_first_login.setter
    def is_first_login(self, is_first_login):
        """Sets the is_first_login of this User.


        :param is_first_login: The is_first_login of this User.  # noqa: E501
        :type: bool
        """

        self._is_first_login = is_first_login

    @property
    def date_password_last_updated(self):
        """Gets the date_password_last_updated of this User.  # noqa: E501


        :return: The date_password_last_updated of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_password_last_updated

    @date_password_last_updated.setter
    def date_password_last_updated(self, date_password_last_updated):
        """Sets the date_password_last_updated of this User.


        :param date_password_last_updated: The date_password_last_updated of this User.  # noqa: E501
        :type: datetime
        """

        self._date_password_last_updated = date_password_last_updated

    @property
    def date_expired(self):
        """Gets the date_expired of this User.  # noqa: E501


        :return: The date_expired of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._date_expired

    @date_expired.setter
    def date_expired(self, date_expired):
        """Sets the date_expired of this User.


        :param date_expired: The date_expired of this User.  # noqa: E501
        :type: datetime
        """

        self._date_expired = date_expired

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.  # noqa: E501


        :return: The avatar_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.


        :param avatar_url: The avatar_url of this User.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
