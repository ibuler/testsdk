# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Output(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'output': 'str',
        'is_end': 'bool',
        'mark': 'str'
    }

    attribute_map = {
        'output': 'output',
        'is_end': 'is_end',
        'mark': 'mark'
    }

    def __init__(self, output=None, is_end=None, mark=None):  # noqa: E501
        """Output - a model defined in Swagger"""  # noqa: E501

        self._output = None
        self._is_end = None
        self._mark = None
        self.discriminator = None

        self.output = output
        self.is_end = is_end
        self.mark = mark

    @property
    def output(self):
        """Gets the output of this Output.  # noqa: E501


        :return: The output of this Output.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Output.


        :param output: The output of this Output.  # noqa: E501
        :type: str
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")  # noqa: E501
        if output is not None and len(output) < 1:
            raise ValueError("Invalid value for `output`, length must be greater than or equal to `1`")  # noqa: E501

        self._output = output

    @property
    def is_end(self):
        """Gets the is_end of this Output.  # noqa: E501


        :return: The is_end of this Output.  # noqa: E501
        :rtype: bool
        """
        return self._is_end

    @is_end.setter
    def is_end(self, is_end):
        """Sets the is_end of this Output.


        :param is_end: The is_end of this Output.  # noqa: E501
        :type: bool
        """
        if is_end is None:
            raise ValueError("Invalid value for `is_end`, must not be `None`")  # noqa: E501

        self._is_end = is_end

    @property
    def mark(self):
        """Gets the mark of this Output.  # noqa: E501


        :return: The mark of this Output.  # noqa: E501
        :rtype: str
        """
        return self._mark

    @mark.setter
    def mark(self, mark):
        """Sets the mark of this Output.


        :param mark: The mark of this Output.  # noqa: E501
        :type: str
        """
        if mark is None:
            raise ValueError("Invalid value for `mark`, must not be `None`")  # noqa: E501
        if mark is not None and len(mark) < 1:
            raise ValueError("Invalid value for `mark`, length must be greater than or equal to `1`")  # noqa: E501

        self._mark = mark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Output):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
