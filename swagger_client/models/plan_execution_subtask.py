# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanExecutionSubtask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'username': 'str',
        'is_success': 'bool',
        'reason': 'str',
        'date_start': 'datetime',
        'timedelta': 'float',
        'asset': 'str',
        'plan_execution': 'str',
        'asset_info': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'username': 'username',
        'is_success': 'is_success',
        'reason': 'reason',
        'date_start': 'date_start',
        'timedelta': 'timedelta',
        'asset': 'asset',
        'plan_execution': 'plan_execution',
        'asset_info': 'asset_info'
    }

    def __init__(self, id=None, org_id=None, username=None, is_success=None, reason=None, date_start=None, timedelta=None, asset=None, plan_execution=None, asset_info=None):  # noqa: E501
        """PlanExecutionSubtask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._username = None
        self._is_success = None
        self._reason = None
        self._date_start = None
        self._timedelta = None
        self._asset = None
        self._plan_execution = None
        self._asset_info = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        self.username = username
        if is_success is not None:
            self.is_success = is_success
        if reason is not None:
            self.reason = reason
        if date_start is not None:
            self.date_start = date_start
        if timedelta is not None:
            self.timedelta = timedelta
        self.asset = asset
        self.plan_execution = plan_execution
        if asset_info is not None:
            self.asset_info = asset_info

    @property
    def id(self):
        """Gets the id of this PlanExecutionSubtask.  # noqa: E501


        :return: The id of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanExecutionSubtask.


        :param id: The id of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this PlanExecutionSubtask.  # noqa: E501


        :return: The org_id of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PlanExecutionSubtask.


        :param org_id: The org_id of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) > 36:
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `36`")  # noqa: E501

        self._org_id = org_id

    @property
    def username(self):
        """Gets the username of this PlanExecutionSubtask.  # noqa: E501


        :return: The username of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PlanExecutionSubtask.


        :param username: The username of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501
        if username is not None and not re.search('^[0-9a-zA-Z_@\\-\\.]*$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[0-9a-zA-Z_@\\-\\.]*$/`")  # noqa: E501

        self._username = username

    @property
    def is_success(self):
        """Gets the is_success of this PlanExecutionSubtask.  # noqa: E501


        :return: The is_success of this PlanExecutionSubtask.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this PlanExecutionSubtask.


        :param is_success: The is_success of this PlanExecutionSubtask.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def reason(self):
        """Gets the reason of this PlanExecutionSubtask.  # noqa: E501


        :return: The reason of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PlanExecutionSubtask.


        :param reason: The reason of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """
        if reason is not None and len(reason) > 1024:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `1024`")  # noqa: E501

        self._reason = reason

    @property
    def date_start(self):
        """Gets the date_start of this PlanExecutionSubtask.  # noqa: E501


        :return: The date_start of this PlanExecutionSubtask.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this PlanExecutionSubtask.


        :param date_start: The date_start of this PlanExecutionSubtask.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def timedelta(self):
        """Gets the timedelta of this PlanExecutionSubtask.  # noqa: E501


        :return: The timedelta of this PlanExecutionSubtask.  # noqa: E501
        :rtype: float
        """
        return self._timedelta

    @timedelta.setter
    def timedelta(self, timedelta):
        """Sets the timedelta of this PlanExecutionSubtask.


        :param timedelta: The timedelta of this PlanExecutionSubtask.  # noqa: E501
        :type: float
        """

        self._timedelta = timedelta

    @property
    def asset(self):
        """Gets the asset of this PlanExecutionSubtask.  # noqa: E501


        :return: The asset of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this PlanExecutionSubtask.


        :param asset: The asset of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def plan_execution(self):
        """Gets the plan_execution of this PlanExecutionSubtask.  # noqa: E501


        :return: The plan_execution of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._plan_execution

    @plan_execution.setter
    def plan_execution(self, plan_execution):
        """Sets the plan_execution of this PlanExecutionSubtask.


        :param plan_execution: The plan_execution of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """
        if plan_execution is None:
            raise ValueError("Invalid value for `plan_execution`, must not be `None`")  # noqa: E501

        self._plan_execution = plan_execution

    @property
    def asset_info(self):
        """Gets the asset_info of this PlanExecutionSubtask.  # noqa: E501


        :return: The asset_info of this PlanExecutionSubtask.  # noqa: E501
        :rtype: str
        """
        return self._asset_info

    @asset_info.setter
    def asset_info(self, asset_info):
        """Sets the asset_info of this PlanExecutionSubtask.


        :param asset_info: The asset_info of this PlanExecutionSubtask.  # noqa: E501
        :type: str
        """

        self._asset_info = asset_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanExecutionSubtask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
