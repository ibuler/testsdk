# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TreeNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'p_id': 'str',
        'is_parent': 'bool',
        'open': 'bool',
        'icon_skin': 'str',
        'meta': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'p_id': 'pId',
        'is_parent': 'isParent',
        'open': 'open',
        'icon_skin': 'iconSkin',
        'meta': 'meta'
    }

    def __init__(self, id=None, name=None, title=None, p_id=None, is_parent=False, open=False, icon_skin=None, meta=None):  # noqa: E501
        """TreeNode - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._title = None
        self._p_id = None
        self._is_parent = None
        self._open = None
        self._icon_skin = None
        self._meta = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.title = title
        self.p_id = p_id
        if is_parent is not None:
            self.is_parent = is_parent
        if open is not None:
            self.open = open
        self.icon_skin = icon_skin
        self.meta = meta

    @property
    def id(self):
        """Gets the id of this TreeNode.  # noqa: E501


        :return: The id of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TreeNode.


        :param id: The id of this TreeNode.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 128:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `128`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TreeNode.  # noqa: E501


        :return: The name of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TreeNode.


        :param name: The name of this TreeNode.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this TreeNode.  # noqa: E501


        :return: The title of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TreeNode.


        :param title: The title of this TreeNode.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 128:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `128`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def p_id(self):
        """Gets the p_id of this TreeNode.  # noqa: E501


        :return: The p_id of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._p_id

    @p_id.setter
    def p_id(self, p_id):
        """Sets the p_id of this TreeNode.


        :param p_id: The p_id of this TreeNode.  # noqa: E501
        :type: str
        """
        if p_id is None:
            raise ValueError("Invalid value for `p_id`, must not be `None`")  # noqa: E501
        if p_id is not None and len(p_id) > 128:
            raise ValueError("Invalid value for `p_id`, length must be less than or equal to `128`")  # noqa: E501
        if p_id is not None and len(p_id) < 1:
            raise ValueError("Invalid value for `p_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._p_id = p_id

    @property
    def is_parent(self):
        """Gets the is_parent of this TreeNode.  # noqa: E501


        :return: The is_parent of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._is_parent

    @is_parent.setter
    def is_parent(self, is_parent):
        """Sets the is_parent of this TreeNode.


        :param is_parent: The is_parent of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._is_parent = is_parent

    @property
    def open(self):
        """Gets the open of this TreeNode.  # noqa: E501


        :return: The open of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this TreeNode.


        :param open: The open of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def icon_skin(self):
        """Gets the icon_skin of this TreeNode.  # noqa: E501


        :return: The icon_skin of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._icon_skin

    @icon_skin.setter
    def icon_skin(self, icon_skin):
        """Sets the icon_skin of this TreeNode.


        :param icon_skin: The icon_skin of this TreeNode.  # noqa: E501
        :type: str
        """
        if icon_skin is None:
            raise ValueError("Invalid value for `icon_skin`, must not be `None`")  # noqa: E501
        if icon_skin is not None and len(icon_skin) > 128:
            raise ValueError("Invalid value for `icon_skin`, length must be less than or equal to `128`")  # noqa: E501

        self._icon_skin = icon_skin

    @property
    def meta(self):
        """Gets the meta of this TreeNode.  # noqa: E501


        :return: The meta of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this TreeNode.


        :param meta: The meta of this TreeNode.  # noqa: E501
        :type: str
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
