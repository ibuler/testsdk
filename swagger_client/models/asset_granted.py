# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.asset_system_user import AssetSystemUser  # noqa: F401,E501


class AssetGranted(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hostname': 'str',
        'ip': 'str',
        'protocols': 'list[str]',
        'os': 'str',
        'domain': 'str',
        'platform': 'str',
        'org_id': 'str',
        'system_users_granted': 'list[AssetSystemUser]',
        'system_users_join': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'hostname': 'hostname',
        'ip': 'ip',
        'protocols': 'protocols',
        'os': 'os',
        'domain': 'domain',
        'platform': 'platform',
        'org_id': 'org_id',
        'system_users_granted': 'system_users_granted',
        'system_users_join': 'system_users_join',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, hostname=None, ip=None, protocols=None, os=None, domain=None, platform=None, org_id='', system_users_granted=None, system_users_join=None, org_name=None):  # noqa: E501
        """AssetGranted - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._hostname = None
        self._ip = None
        self._protocols = None
        self._os = None
        self._domain = None
        self._platform = None
        self._org_id = None
        self._system_users_granted = None
        self._system_users_join = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hostname is not None:
            self.hostname = hostname
        if ip is not None:
            self.ip = ip
        if protocols is not None:
            self.protocols = protocols
        if os is not None:
            self.os = os
        if domain is not None:
            self.domain = domain
        if platform is not None:
            self.platform = platform
        if org_id is not None:
            self.org_id = org_id
        if system_users_granted is not None:
            self.system_users_granted = system_users_granted
        if system_users_join is not None:
            self.system_users_join = system_users_join
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this AssetGranted.  # noqa: E501


        :return: The id of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetGranted.


        :param id: The id of this AssetGranted.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hostname(self):
        """Gets the hostname of this AssetGranted.  # noqa: E501


        :return: The hostname of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AssetGranted.


        :param hostname: The hostname of this AssetGranted.  # noqa: E501
        :type: str
        """
        if hostname is not None and len(hostname) < 1:
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `1`")  # noqa: E501

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this AssetGranted.  # noqa: E501


        :return: The ip of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AssetGranted.


        :param ip: The ip of this AssetGranted.  # noqa: E501
        :type: str
        """
        if ip is not None and len(ip) < 1:
            raise ValueError("Invalid value for `ip`, length must be greater than or equal to `1`")  # noqa: E501

        self._ip = ip

    @property
    def protocols(self):
        """Gets the protocols of this AssetGranted.  # noqa: E501


        :return: The protocols of this AssetGranted.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this AssetGranted.


        :param protocols: The protocols of this AssetGranted.  # noqa: E501
        :type: list[str]
        """

        self._protocols = protocols

    @property
    def os(self):
        """Gets the os of this AssetGranted.  # noqa: E501


        :return: The os of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AssetGranted.


        :param os: The os of this AssetGranted.  # noqa: E501
        :type: str
        """
        if os is not None and len(os) < 1:
            raise ValueError("Invalid value for `os`, length must be greater than or equal to `1`")  # noqa: E501

        self._os = os

    @property
    def domain(self):
        """Gets the domain of this AssetGranted.  # noqa: E501


        :return: The domain of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AssetGranted.


        :param domain: The domain of this AssetGranted.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def platform(self):
        """Gets the platform of this AssetGranted.  # noqa: E501


        :return: The platform of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AssetGranted.


        :param platform: The platform of this AssetGranted.  # noqa: E501
        :type: str
        """
        allowed_values = ["Linux", "Unix", "MacOS", "BSD", "Windows", "Windows2016", "Other"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def org_id(self):
        """Gets the org_id of this AssetGranted.  # noqa: E501


        :return: The org_id of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AssetGranted.


        :param org_id: The org_id of this AssetGranted.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) < 1:
            raise ValueError("Invalid value for `org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._org_id = org_id

    @property
    def system_users_granted(self):
        """Gets the system_users_granted of this AssetGranted.  # noqa: E501


        :return: The system_users_granted of this AssetGranted.  # noqa: E501
        :rtype: list[AssetSystemUser]
        """
        return self._system_users_granted

    @system_users_granted.setter
    def system_users_granted(self, system_users_granted):
        """Sets the system_users_granted of this AssetGranted.


        :param system_users_granted: The system_users_granted of this AssetGranted.  # noqa: E501
        :type: list[AssetSystemUser]
        """

        self._system_users_granted = system_users_granted

    @property
    def system_users_join(self):
        """Gets the system_users_join of this AssetGranted.  # noqa: E501


        :return: The system_users_join of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._system_users_join

    @system_users_join.setter
    def system_users_join(self, system_users_join):
        """Sets the system_users_join of this AssetGranted.


        :param system_users_join: The system_users_join of this AssetGranted.  # noqa: E501
        :type: str
        """

        self._system_users_join = system_users_join

    @property
    def org_name(self):
        """Gets the org_name of this AssetGranted.  # noqa: E501


        :return: The org_name of this AssetGranted.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this AssetGranted.


        :param org_name: The org_name of this AssetGranted.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetGranted):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
