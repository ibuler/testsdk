# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'username': 'str',
        'password': 'str',
        'public_key': 'str',
        'private_key': 'str',
        'login_mode': 'str',
        'login_mode_display': 'str',
        'priority': 'int',
        'protocol': 'str',
        'auto_push': 'bool',
        'cmd_filters': 'list[str]',
        'sudo': 'str',
        'shell': 'str',
        'comment': 'str',
        'nodes': 'list[str]',
        'assets_amount': 'str',
        'auto_generate_key': 'bool',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'password': 'password',
        'public_key': 'public_key',
        'private_key': 'private_key',
        'login_mode': 'login_mode',
        'login_mode_display': 'login_mode_display',
        'priority': 'priority',
        'protocol': 'protocol',
        'auto_push': 'auto_push',
        'cmd_filters': 'cmd_filters',
        'sudo': 'sudo',
        'shell': 'shell',
        'comment': 'comment',
        'nodes': 'nodes',
        'assets_amount': 'assets_amount',
        'auto_generate_key': 'auto_generate_key',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, name=None, username=None, password=None, public_key=None, private_key=None, login_mode=None, login_mode_display=None, priority=None, protocol=None, auto_push=None, cmd_filters=None, sudo=None, shell=None, comment=None, nodes=None, assets_amount=None, auto_generate_key=None, org_id='', org_name=None):  # noqa: E501
        """SystemUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._username = None
        self._password = None
        self._public_key = None
        self._private_key = None
        self._login_mode = None
        self._login_mode_display = None
        self._priority = None
        self._protocol = None
        self._auto_push = None
        self._cmd_filters = None
        self._sudo = None
        self._shell = None
        self._comment = None
        self._nodes = None
        self._assets_amount = None
        self._auto_generate_key = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if public_key is not None:
            self.public_key = public_key
        if private_key is not None:
            self.private_key = private_key
        if login_mode is not None:
            self.login_mode = login_mode
        if login_mode_display is not None:
            self.login_mode_display = login_mode_display
        if priority is not None:
            self.priority = priority
        if protocol is not None:
            self.protocol = protocol
        if auto_push is not None:
            self.auto_push = auto_push
        if cmd_filters is not None:
            self.cmd_filters = cmd_filters
        if sudo is not None:
            self.sudo = sudo
        if shell is not None:
            self.shell = shell
        if comment is not None:
            self.comment = comment
        if nodes is not None:
            self.nodes = nodes
        if assets_amount is not None:
            self.assets_amount = assets_amount
        if auto_generate_key is not None:
            self.auto_generate_key = auto_generate_key
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this SystemUser.  # noqa: E501


        :return: The id of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemUser.


        :param id: The id of this SystemUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SystemUser.  # noqa: E501


        :return: The name of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemUser.


        :param name: The name of this SystemUser.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this SystemUser.  # noqa: E501


        :return: The username of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SystemUser.


        :param username: The username of this SystemUser.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and not re.search('^[0-9a-zA-Z_@\\-\\.]*$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[0-9a-zA-Z_@\\-\\.]*$/`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this SystemUser.  # noqa: E501


        :return: The password of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SystemUser.


        :param password: The password of this SystemUser.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 512:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `512`")  # noqa: E501

        self._password = password

    @property
    def public_key(self):
        """Gets the public_key of this SystemUser.  # noqa: E501


        :return: The public_key of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SystemUser.


        :param public_key: The public_key of this SystemUser.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this SystemUser.  # noqa: E501


        :return: The private_key of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this SystemUser.


        :param private_key: The private_key of this SystemUser.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def login_mode(self):
        """Gets the login_mode of this SystemUser.  # noqa: E501


        :return: The login_mode of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._login_mode

    @login_mode.setter
    def login_mode(self, login_mode):
        """Sets the login_mode of this SystemUser.


        :param login_mode: The login_mode of this SystemUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if login_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `login_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(login_mode, allowed_values)
            )

        self._login_mode = login_mode

    @property
    def login_mode_display(self):
        """Gets the login_mode_display of this SystemUser.  # noqa: E501


        :return: The login_mode_display of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._login_mode_display

    @login_mode_display.setter
    def login_mode_display(self, login_mode_display):
        """Sets the login_mode_display of this SystemUser.


        :param login_mode_display: The login_mode_display of this SystemUser.  # noqa: E501
        :type: str
        """

        self._login_mode_display = login_mode_display

    @property
    def priority(self):
        """Gets the priority of this SystemUser.  # noqa: E501


        :return: The priority of this SystemUser.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SystemUser.


        :param priority: The priority of this SystemUser.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this SystemUser.  # noqa: E501


        :return: The protocol of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SystemUser.


        :param protocol: The protocol of this SystemUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssh", "rdp", "telnet", "vnc"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def auto_push(self):
        """Gets the auto_push of this SystemUser.  # noqa: E501


        :return: The auto_push of this SystemUser.  # noqa: E501
        :rtype: bool
        """
        return self._auto_push

    @auto_push.setter
    def auto_push(self, auto_push):
        """Sets the auto_push of this SystemUser.


        :param auto_push: The auto_push of this SystemUser.  # noqa: E501
        :type: bool
        """

        self._auto_push = auto_push

    @property
    def cmd_filters(self):
        """Gets the cmd_filters of this SystemUser.  # noqa: E501


        :return: The cmd_filters of this SystemUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._cmd_filters

    @cmd_filters.setter
    def cmd_filters(self, cmd_filters):
        """Sets the cmd_filters of this SystemUser.


        :param cmd_filters: The cmd_filters of this SystemUser.  # noqa: E501
        :type: list[str]
        """

        self._cmd_filters = cmd_filters

    @property
    def sudo(self):
        """Gets the sudo of this SystemUser.  # noqa: E501


        :return: The sudo of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """Sets the sudo of this SystemUser.


        :param sudo: The sudo of this SystemUser.  # noqa: E501
        :type: str
        """
        if sudo is not None and len(sudo) < 1:
            raise ValueError("Invalid value for `sudo`, length must be greater than or equal to `1`")  # noqa: E501

        self._sudo = sudo

    @property
    def shell(self):
        """Gets the shell of this SystemUser.  # noqa: E501


        :return: The shell of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this SystemUser.


        :param shell: The shell of this SystemUser.  # noqa: E501
        :type: str
        """
        if shell is not None and len(shell) > 64:
            raise ValueError("Invalid value for `shell`, length must be less than or equal to `64`")  # noqa: E501
        if shell is not None and len(shell) < 1:
            raise ValueError("Invalid value for `shell`, length must be greater than or equal to `1`")  # noqa: E501

        self._shell = shell

    @property
    def comment(self):
        """Gets the comment of this SystemUser.  # noqa: E501


        :return: The comment of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SystemUser.


        :param comment: The comment of this SystemUser.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def nodes(self):
        """Gets the nodes of this SystemUser.  # noqa: E501


        :return: The nodes of this SystemUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this SystemUser.


        :param nodes: The nodes of this SystemUser.  # noqa: E501
        :type: list[str]
        """

        self._nodes = nodes

    @property
    def assets_amount(self):
        """Gets the assets_amount of this SystemUser.  # noqa: E501


        :return: The assets_amount of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._assets_amount

    @assets_amount.setter
    def assets_amount(self, assets_amount):
        """Sets the assets_amount of this SystemUser.


        :param assets_amount: The assets_amount of this SystemUser.  # noqa: E501
        :type: str
        """

        self._assets_amount = assets_amount

    @property
    def auto_generate_key(self):
        """Gets the auto_generate_key of this SystemUser.  # noqa: E501


        :return: The auto_generate_key of this SystemUser.  # noqa: E501
        :rtype: bool
        """
        return self._auto_generate_key

    @auto_generate_key.setter
    def auto_generate_key(self, auto_generate_key):
        """Sets the auto_generate_key of this SystemUser.


        :param auto_generate_key: The auto_generate_key of this SystemUser.  # noqa: E501
        :type: bool
        """

        self._auto_generate_key = auto_generate_key

    @property
    def org_id(self):
        """Gets the org_id of this SystemUser.  # noqa: E501


        :return: The org_id of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SystemUser.


        :param org_id: The org_id of this SystemUser.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this SystemUser.  # noqa: E501


        :return: The org_name of this SystemUser.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this SystemUser.


        :param org_name: The org_name of this SystemUser.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
