# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FTPLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'user': 'str',
        'remote_addr': 'str',
        'asset': 'str',
        'system_user': 'str',
        'operate': 'str',
        'filename': 'str',
        'is_success': 'bool',
        'date_start': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'user': 'user',
        'remote_addr': 'remote_addr',
        'asset': 'asset',
        'system_user': 'system_user',
        'operate': 'operate',
        'filename': 'filename',
        'is_success': 'is_success',
        'date_start': 'date_start'
    }

    def __init__(self, id=None, org_id=None, user=None, remote_addr=None, asset=None, system_user=None, operate=None, filename=None, is_success=None, date_start=None):  # noqa: E501
        """FTPLog - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._user = None
        self._remote_addr = None
        self._asset = None
        self._system_user = None
        self._operate = None
        self._filename = None
        self._is_success = None
        self._date_start = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        self.user = user
        if remote_addr is not None:
            self.remote_addr = remote_addr
        self.asset = asset
        self.system_user = system_user
        self.operate = operate
        self.filename = filename
        if is_success is not None:
            self.is_success = is_success
        if date_start is not None:
            self.date_start = date_start

    @property
    def id(self):
        """Gets the id of this FTPLog.  # noqa: E501


        :return: The id of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FTPLog.


        :param id: The id of this FTPLog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this FTPLog.  # noqa: E501


        :return: The org_id of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this FTPLog.


        :param org_id: The org_id of this FTPLog.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) > 36:
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `36`")  # noqa: E501

        self._org_id = org_id

    @property
    def user(self):
        """Gets the user of this FTPLog.  # noqa: E501


        :return: The user of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FTPLog.


        :param user: The user of this FTPLog.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501
        if user is not None and len(user) > 128:
            raise ValueError("Invalid value for `user`, length must be less than or equal to `128`")  # noqa: E501
        if user is not None and len(user) < 1:
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `1`")  # noqa: E501

        self._user = user

    @property
    def remote_addr(self):
        """Gets the remote_addr of this FTPLog.  # noqa: E501


        :return: The remote_addr of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this FTPLog.


        :param remote_addr: The remote_addr of this FTPLog.  # noqa: E501
        :type: str
        """
        if remote_addr is not None and len(remote_addr) > 15:
            raise ValueError("Invalid value for `remote_addr`, length must be less than or equal to `15`")  # noqa: E501

        self._remote_addr = remote_addr

    @property
    def asset(self):
        """Gets the asset of this FTPLog.  # noqa: E501


        :return: The asset of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this FTPLog.


        :param asset: The asset of this FTPLog.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501
        if asset is not None and len(asset) > 1024:
            raise ValueError("Invalid value for `asset`, length must be less than or equal to `1024`")  # noqa: E501
        if asset is not None and len(asset) < 1:
            raise ValueError("Invalid value for `asset`, length must be greater than or equal to `1`")  # noqa: E501

        self._asset = asset

    @property
    def system_user(self):
        """Gets the system_user of this FTPLog.  # noqa: E501


        :return: The system_user of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this FTPLog.


        :param system_user: The system_user of this FTPLog.  # noqa: E501
        :type: str
        """
        if system_user is None:
            raise ValueError("Invalid value for `system_user`, must not be `None`")  # noqa: E501
        if system_user is not None and len(system_user) > 128:
            raise ValueError("Invalid value for `system_user`, length must be less than or equal to `128`")  # noqa: E501
        if system_user is not None and len(system_user) < 1:
            raise ValueError("Invalid value for `system_user`, length must be greater than or equal to `1`")  # noqa: E501

        self._system_user = system_user

    @property
    def operate(self):
        """Gets the operate of this FTPLog.  # noqa: E501


        :return: The operate of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._operate

    @operate.setter
    def operate(self, operate):
        """Sets the operate of this FTPLog.


        :param operate: The operate of this FTPLog.  # noqa: E501
        :type: str
        """
        if operate is None:
            raise ValueError("Invalid value for `operate`, must not be `None`")  # noqa: E501
        if operate is not None and len(operate) > 16:
            raise ValueError("Invalid value for `operate`, length must be less than or equal to `16`")  # noqa: E501
        if operate is not None and len(operate) < 1:
            raise ValueError("Invalid value for `operate`, length must be greater than or equal to `1`")  # noqa: E501

        self._operate = operate

    @property
    def filename(self):
        """Gets the filename of this FTPLog.  # noqa: E501


        :return: The filename of this FTPLog.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FTPLog.


        :param filename: The filename of this FTPLog.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501
        if filename is not None and len(filename) > 1024:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `1024`")  # noqa: E501
        if filename is not None and len(filename) < 1:
            raise ValueError("Invalid value for `filename`, length must be greater than or equal to `1`")  # noqa: E501

        self._filename = filename

    @property
    def is_success(self):
        """Gets the is_success of this FTPLog.  # noqa: E501


        :return: The is_success of this FTPLog.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this FTPLog.


        :param is_success: The is_success of this FTPLog.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def date_start(self):
        """Gets the date_start of this FTPLog.  # noqa: E501


        :return: The date_start of this FTPLog.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this FTPLog.


        :param date_start: The date_start of this FTPLog.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FTPLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
