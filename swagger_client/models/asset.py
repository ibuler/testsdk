# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.connectivity import Connectivity  # noqa: F401,E501


class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ip': 'str',
        'hostname': 'str',
        'protocol': 'str',
        'port': 'int',
        'protocols': 'list[str]',
        'platform': 'str',
        'is_active': 'bool',
        'public_ip': 'str',
        'domain': 'str',
        'admin_user': 'str',
        'nodes': 'list[str]',
        'labels': 'list[str]',
        'number': 'str',
        'vendor': 'str',
        'model': 'str',
        'sn': 'str',
        'cpu_model': 'str',
        'cpu_count': 'int',
        'cpu_cores': 'int',
        'cpu_vcpus': 'int',
        'memory': 'str',
        'disk_total': 'str',
        'disk_info': 'str',
        'os': 'str',
        'os_version': 'str',
        'os_arch': 'str',
        'hostname_raw': 'str',
        'comment': 'str',
        'created_by': 'str',
        'date_created': 'datetime',
        'hardware_info': 'str',
        'connectivity': 'Connectivity',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ip': 'ip',
        'hostname': 'hostname',
        'protocol': 'protocol',
        'port': 'port',
        'protocols': 'protocols',
        'platform': 'platform',
        'is_active': 'is_active',
        'public_ip': 'public_ip',
        'domain': 'domain',
        'admin_user': 'admin_user',
        'nodes': 'nodes',
        'labels': 'labels',
        'number': 'number',
        'vendor': 'vendor',
        'model': 'model',
        'sn': 'sn',
        'cpu_model': 'cpu_model',
        'cpu_count': 'cpu_count',
        'cpu_cores': 'cpu_cores',
        'cpu_vcpus': 'cpu_vcpus',
        'memory': 'memory',
        'disk_total': 'disk_total',
        'disk_info': 'disk_info',
        'os': 'os',
        'os_version': 'os_version',
        'os_arch': 'os_arch',
        'hostname_raw': 'hostname_raw',
        'comment': 'comment',
        'created_by': 'created_by',
        'date_created': 'date_created',
        'hardware_info': 'hardware_info',
        'connectivity': 'connectivity',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, ip=None, hostname=None, protocol=None, port=None, protocols=None, platform=None, is_active=None, public_ip=None, domain=None, admin_user=None, nodes=None, labels=None, number=None, vendor=None, model=None, sn=None, cpu_model=None, cpu_count=None, cpu_cores=None, cpu_vcpus=None, memory=None, disk_total=None, disk_info=None, os=None, os_version=None, os_arch=None, hostname_raw=None, comment=None, created_by=None, date_created=None, hardware_info=None, connectivity=None, org_id='', org_name=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ip = None
        self._hostname = None
        self._protocol = None
        self._port = None
        self._protocols = None
        self._platform = None
        self._is_active = None
        self._public_ip = None
        self._domain = None
        self._admin_user = None
        self._nodes = None
        self._labels = None
        self._number = None
        self._vendor = None
        self._model = None
        self._sn = None
        self._cpu_model = None
        self._cpu_count = None
        self._cpu_cores = None
        self._cpu_vcpus = None
        self._memory = None
        self._disk_total = None
        self._disk_info = None
        self._os = None
        self._os_version = None
        self._os_arch = None
        self._hostname_raw = None
        self._comment = None
        self._created_by = None
        self._date_created = None
        self._hardware_info = None
        self._connectivity = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.ip = ip
        self.hostname = hostname
        if protocol is not None:
            self.protocol = protocol
        if port is not None:
            self.port = port
        if protocols is not None:
            self.protocols = protocols
        if platform is not None:
            self.platform = platform
        if is_active is not None:
            self.is_active = is_active
        if public_ip is not None:
            self.public_ip = public_ip
        if domain is not None:
            self.domain = domain
        if admin_user is not None:
            self.admin_user = admin_user
        if nodes is not None:
            self.nodes = nodes
        if labels is not None:
            self.labels = labels
        if number is not None:
            self.number = number
        if vendor is not None:
            self.vendor = vendor
        if model is not None:
            self.model = model
        if sn is not None:
            self.sn = sn
        if cpu_model is not None:
            self.cpu_model = cpu_model
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if cpu_vcpus is not None:
            self.cpu_vcpus = cpu_vcpus
        if memory is not None:
            self.memory = memory
        if disk_total is not None:
            self.disk_total = disk_total
        if disk_info is not None:
            self.disk_info = disk_info
        if os is not None:
            self.os = os
        if os_version is not None:
            self.os_version = os_version
        if os_arch is not None:
            self.os_arch = os_arch
        if hostname_raw is not None:
            self.hostname_raw = hostname_raw
        if comment is not None:
            self.comment = comment
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created
        if hardware_info is not None:
            self.hardware_info = hardware_info
        if connectivity is not None:
            self.connectivity = connectivity
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501


        :return: The id of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.


        :param id: The id of this Asset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this Asset.  # noqa: E501


        :return: The ip of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Asset.


        :param ip: The ip of this Asset.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501
        if ip is not None and len(ip) > 128:
            raise ValueError("Invalid value for `ip`, length must be less than or equal to `128`")  # noqa: E501
        if ip is not None and len(ip) < 1:
            raise ValueError("Invalid value for `ip`, length must be greater than or equal to `1`")  # noqa: E501

        self._ip = ip

    @property
    def hostname(self):
        """Gets the hostname of this Asset.  # noqa: E501


        :return: The hostname of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Asset.


        :param hostname: The hostname of this Asset.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501
        if hostname is not None and len(hostname) > 128:
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `128`")  # noqa: E501
        if hostname is not None and len(hostname) < 1:
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `1`")  # noqa: E501

        self._hostname = hostname

    @property
    def protocol(self):
        """Gets the protocol of this Asset.  # noqa: E501


        :return: The protocol of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Asset.


        :param protocol: The protocol of this Asset.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssh", "rdp", "telnet", "vnc"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this Asset.  # noqa: E501


        :return: The port of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Asset.


        :param port: The port of this Asset.  # noqa: E501
        :type: int
        """
        if port is not None and port > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if port is not None and port < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._port = port

    @property
    def protocols(self):
        """Gets the protocols of this Asset.  # noqa: E501


        :return: The protocols of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this Asset.


        :param protocols: The protocols of this Asset.  # noqa: E501
        :type: list[str]
        """

        self._protocols = protocols

    @property
    def platform(self):
        """Gets the platform of this Asset.  # noqa: E501


        :return: The platform of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Asset.


        :param platform: The platform of this Asset.  # noqa: E501
        :type: str
        """
        allowed_values = ["Linux", "Unix", "MacOS", "BSD", "Windows", "Windows2016", "Other"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def is_active(self):
        """Gets the is_active of this Asset.  # noqa: E501


        :return: The is_active of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Asset.


        :param is_active: The is_active of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def public_ip(self):
        """Gets the public_ip of this Asset.  # noqa: E501


        :return: The public_ip of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this Asset.


        :param public_ip: The public_ip of this Asset.  # noqa: E501
        :type: str
        """
        if public_ip is not None and len(public_ip) > 128:
            raise ValueError("Invalid value for `public_ip`, length must be less than or equal to `128`")  # noqa: E501

        self._public_ip = public_ip

    @property
    def domain(self):
        """Gets the domain of this Asset.  # noqa: E501


        :return: The domain of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Asset.


        :param domain: The domain of this Asset.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def admin_user(self):
        """Gets the admin_user of this Asset.  # noqa: E501


        :return: The admin_user of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this Asset.


        :param admin_user: The admin_user of this Asset.  # noqa: E501
        :type: str
        """

        self._admin_user = admin_user

    @property
    def nodes(self):
        """Gets the nodes of this Asset.  # noqa: E501


        :return: The nodes of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Asset.


        :param nodes: The nodes of this Asset.  # noqa: E501
        :type: list[str]
        """

        self._nodes = nodes

    @property
    def labels(self):
        """Gets the labels of this Asset.  # noqa: E501


        :return: The labels of this Asset.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Asset.


        :param labels: The labels of this Asset.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def number(self):
        """Gets the number of this Asset.  # noqa: E501


        :return: The number of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Asset.


        :param number: The number of this Asset.  # noqa: E501
        :type: str
        """
        if number is not None and len(number) > 32:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `32`")  # noqa: E501

        self._number = number

    @property
    def vendor(self):
        """Gets the vendor of this Asset.  # noqa: E501


        :return: The vendor of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Asset.


        :param vendor: The vendor of this Asset.  # noqa: E501
        :type: str
        """
        if vendor is not None and len(vendor) < 1:
            raise ValueError("Invalid value for `vendor`, length must be greater than or equal to `1`")  # noqa: E501

        self._vendor = vendor

    @property
    def model(self):
        """Gets the model of this Asset.  # noqa: E501


        :return: The model of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Asset.


        :param model: The model of this Asset.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")  # noqa: E501

        self._model = model

    @property
    def sn(self):
        """Gets the sn of this Asset.  # noqa: E501


        :return: The sn of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this Asset.


        :param sn: The sn of this Asset.  # noqa: E501
        :type: str
        """
        if sn is not None and len(sn) < 1:
            raise ValueError("Invalid value for `sn`, length must be greater than or equal to `1`")  # noqa: E501

        self._sn = sn

    @property
    def cpu_model(self):
        """Gets the cpu_model of this Asset.  # noqa: E501


        :return: The cpu_model of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this Asset.


        :param cpu_model: The cpu_model of this Asset.  # noqa: E501
        :type: str
        """
        if cpu_model is not None and len(cpu_model) < 1:
            raise ValueError("Invalid value for `cpu_model`, length must be greater than or equal to `1`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def cpu_count(self):
        """Gets the cpu_count of this Asset.  # noqa: E501


        :return: The cpu_count of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this Asset.


        :param cpu_count: The cpu_count of this Asset.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this Asset.  # noqa: E501


        :return: The cpu_cores of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this Asset.


        :param cpu_cores: The cpu_cores of this Asset.  # noqa: E501
        :type: int
        """

        self._cpu_cores = cpu_cores

    @property
    def cpu_vcpus(self):
        """Gets the cpu_vcpus of this Asset.  # noqa: E501


        :return: The cpu_vcpus of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._cpu_vcpus

    @cpu_vcpus.setter
    def cpu_vcpus(self, cpu_vcpus):
        """Sets the cpu_vcpus of this Asset.


        :param cpu_vcpus: The cpu_vcpus of this Asset.  # noqa: E501
        :type: int
        """

        self._cpu_vcpus = cpu_vcpus

    @property
    def memory(self):
        """Gets the memory of this Asset.  # noqa: E501


        :return: The memory of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Asset.


        :param memory: The memory of this Asset.  # noqa: E501
        :type: str
        """
        if memory is not None and len(memory) < 1:
            raise ValueError("Invalid value for `memory`, length must be greater than or equal to `1`")  # noqa: E501

        self._memory = memory

    @property
    def disk_total(self):
        """Gets the disk_total of this Asset.  # noqa: E501


        :return: The disk_total of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._disk_total

    @disk_total.setter
    def disk_total(self, disk_total):
        """Sets the disk_total of this Asset.


        :param disk_total: The disk_total of this Asset.  # noqa: E501
        :type: str
        """
        if disk_total is not None and len(disk_total) < 1:
            raise ValueError("Invalid value for `disk_total`, length must be greater than or equal to `1`")  # noqa: E501

        self._disk_total = disk_total

    @property
    def disk_info(self):
        """Gets the disk_info of this Asset.  # noqa: E501


        :return: The disk_info of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._disk_info

    @disk_info.setter
    def disk_info(self, disk_info):
        """Sets the disk_info of this Asset.


        :param disk_info: The disk_info of this Asset.  # noqa: E501
        :type: str
        """
        if disk_info is not None and len(disk_info) < 1:
            raise ValueError("Invalid value for `disk_info`, length must be greater than or equal to `1`")  # noqa: E501

        self._disk_info = disk_info

    @property
    def os(self):
        """Gets the os of this Asset.  # noqa: E501


        :return: The os of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Asset.


        :param os: The os of this Asset.  # noqa: E501
        :type: str
        """
        if os is not None and len(os) < 1:
            raise ValueError("Invalid value for `os`, length must be greater than or equal to `1`")  # noqa: E501

        self._os = os

    @property
    def os_version(self):
        """Gets the os_version of this Asset.  # noqa: E501


        :return: The os_version of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Asset.


        :param os_version: The os_version of this Asset.  # noqa: E501
        :type: str
        """
        if os_version is not None and len(os_version) < 1:
            raise ValueError("Invalid value for `os_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._os_version = os_version

    @property
    def os_arch(self):
        """Gets the os_arch of this Asset.  # noqa: E501


        :return: The os_arch of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._os_arch

    @os_arch.setter
    def os_arch(self, os_arch):
        """Sets the os_arch of this Asset.


        :param os_arch: The os_arch of this Asset.  # noqa: E501
        :type: str
        """
        if os_arch is not None and len(os_arch) < 1:
            raise ValueError("Invalid value for `os_arch`, length must be greater than or equal to `1`")  # noqa: E501

        self._os_arch = os_arch

    @property
    def hostname_raw(self):
        """Gets the hostname_raw of this Asset.  # noqa: E501


        :return: The hostname_raw of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._hostname_raw

    @hostname_raw.setter
    def hostname_raw(self, hostname_raw):
        """Sets the hostname_raw of this Asset.


        :param hostname_raw: The hostname_raw of this Asset.  # noqa: E501
        :type: str
        """
        if hostname_raw is not None and len(hostname_raw) < 1:
            raise ValueError("Invalid value for `hostname_raw`, length must be greater than or equal to `1`")  # noqa: E501

        self._hostname_raw = hostname_raw

    @property
    def comment(self):
        """Gets the comment of this Asset.  # noqa: E501


        :return: The comment of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Asset.


        :param comment: The comment of this Asset.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 128:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `128`")  # noqa: E501

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this Asset.  # noqa: E501


        :return: The created_by of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Asset.


        :param created_by: The created_by of this Asset.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this Asset.  # noqa: E501


        :return: The date_created of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Asset.


        :param date_created: The date_created of this Asset.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def hardware_info(self):
        """Gets the hardware_info of this Asset.  # noqa: E501


        :return: The hardware_info of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._hardware_info

    @hardware_info.setter
    def hardware_info(self, hardware_info):
        """Sets the hardware_info of this Asset.


        :param hardware_info: The hardware_info of this Asset.  # noqa: E501
        :type: str
        """

        self._hardware_info = hardware_info

    @property
    def connectivity(self):
        """Gets the connectivity of this Asset.  # noqa: E501


        :return: The connectivity of this Asset.  # noqa: E501
        :rtype: Connectivity
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this Asset.


        :param connectivity: The connectivity of this Asset.  # noqa: E501
        :type: Connectivity
        """

        self._connectivity = connectivity

    @property
    def org_id(self):
        """Gets the org_id of this Asset.  # noqa: E501


        :return: The org_id of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Asset.


        :param org_id: The org_id of this Asset.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this Asset.  # noqa: E501


        :return: The org_name of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this Asset.


        :param org_name: The org_name of this Asset.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
