# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoteAppConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'asset': 'str',
        'system_user': 'str',
        'parameter_remote_app': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'asset': 'asset',
        'system_user': 'system_user',
        'parameter_remote_app': 'parameter_remote_app'
    }

    def __init__(self, id=None, name=None, asset=None, system_user=None, parameter_remote_app=None):  # noqa: E501
        """RemoteAppConnectionInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._asset = None
        self._system_user = None
        self._parameter_remote_app = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.asset = asset
        self.system_user = system_user
        if parameter_remote_app is not None:
            self.parameter_remote_app = parameter_remote_app

    @property
    def id(self):
        """Gets the id of this RemoteAppConnectionInfo.  # noqa: E501


        :return: The id of this RemoteAppConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteAppConnectionInfo.


        :param id: The id of this RemoteAppConnectionInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteAppConnectionInfo.  # noqa: E501


        :return: The name of this RemoteAppConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteAppConnectionInfo.


        :param name: The name of this RemoteAppConnectionInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def asset(self):
        """Gets the asset of this RemoteAppConnectionInfo.  # noqa: E501


        :return: The asset of this RemoteAppConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this RemoteAppConnectionInfo.


        :param asset: The asset of this RemoteAppConnectionInfo.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def system_user(self):
        """Gets the system_user of this RemoteAppConnectionInfo.  # noqa: E501


        :return: The system_user of this RemoteAppConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this RemoteAppConnectionInfo.


        :param system_user: The system_user of this RemoteAppConnectionInfo.  # noqa: E501
        :type: str
        """
        if system_user is None:
            raise ValueError("Invalid value for `system_user`, must not be `None`")  # noqa: E501

        self._system_user = system_user

    @property
    def parameter_remote_app(self):
        """Gets the parameter_remote_app of this RemoteAppConnectionInfo.  # noqa: E501


        :return: The parameter_remote_app of this RemoteAppConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._parameter_remote_app

    @parameter_remote_app.setter
    def parameter_remote_app(self, parameter_remote_app):
        """Sets the parameter_remote_app of this RemoteAppConnectionInfo.


        :param parameter_remote_app: The parameter_remote_app of this RemoteAppConnectionInfo.  # noqa: E501
        :type: str
        """

        self._parameter_remote_app = parameter_remote_app

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteAppConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
