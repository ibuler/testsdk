# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlanExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'date_start': 'datetime',
        'timedelta': 'float',
        'plan_snapshot': 'str',
        'password': 'str',
        'public_key': 'str',
        'private_key': 'str',
        'date_created': 'datetime',
        'plan': 'str',
        'username': 'str',
        'assets': 'str',
        'nodes': 'str',
        'result_summary': 'str',
        'get_password_strategy_display': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'date_start': 'date_start',
        'timedelta': 'timedelta',
        'plan_snapshot': 'plan_snapshot',
        'password': 'password',
        'public_key': 'public_key',
        'private_key': 'private_key',
        'date_created': 'date_created',
        'plan': 'plan',
        'username': 'username',
        'assets': 'assets',
        'nodes': 'nodes',
        'result_summary': 'result_summary',
        'get_password_strategy_display': 'get_password_strategy_display'
    }

    def __init__(self, id=None, org_id=None, date_start=None, timedelta=None, plan_snapshot=None, password=None, public_key=None, private_key=None, date_created=None, plan=None, username=None, assets=None, nodes=None, result_summary=None, get_password_strategy_display=None):  # noqa: E501
        """PlanExecution - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._date_start = None
        self._timedelta = None
        self._plan_snapshot = None
        self._password = None
        self._public_key = None
        self._private_key = None
        self._date_created = None
        self._plan = None
        self._username = None
        self._assets = None
        self._nodes = None
        self._result_summary = None
        self._get_password_strategy_display = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if date_start is not None:
            self.date_start = date_start
        if timedelta is not None:
            self.timedelta = timedelta
        if plan_snapshot is not None:
            self.plan_snapshot = plan_snapshot
        if password is not None:
            self.password = password
        if public_key is not None:
            self.public_key = public_key
        if private_key is not None:
            self.private_key = private_key
        if date_created is not None:
            self.date_created = date_created
        self.plan = plan
        if username is not None:
            self.username = username
        if assets is not None:
            self.assets = assets
        if nodes is not None:
            self.nodes = nodes
        if result_summary is not None:
            self.result_summary = result_summary
        if get_password_strategy_display is not None:
            self.get_password_strategy_display = get_password_strategy_display

    @property
    def id(self):
        """Gets the id of this PlanExecution.  # noqa: E501


        :return: The id of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanExecution.


        :param id: The id of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this PlanExecution.  # noqa: E501


        :return: The org_id of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PlanExecution.


        :param org_id: The org_id of this PlanExecution.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) > 36:
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `36`")  # noqa: E501

        self._org_id = org_id

    @property
    def date_start(self):
        """Gets the date_start of this PlanExecution.  # noqa: E501


        :return: The date_start of this PlanExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this PlanExecution.


        :param date_start: The date_start of this PlanExecution.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def timedelta(self):
        """Gets the timedelta of this PlanExecution.  # noqa: E501


        :return: The timedelta of this PlanExecution.  # noqa: E501
        :rtype: float
        """
        return self._timedelta

    @timedelta.setter
    def timedelta(self, timedelta):
        """Sets the timedelta of this PlanExecution.


        :param timedelta: The timedelta of this PlanExecution.  # noqa: E501
        :type: float
        """

        self._timedelta = timedelta

    @property
    def plan_snapshot(self):
        """Gets the plan_snapshot of this PlanExecution.  # noqa: E501


        :return: The plan_snapshot of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._plan_snapshot

    @plan_snapshot.setter
    def plan_snapshot(self, plan_snapshot):
        """Sets the plan_snapshot of this PlanExecution.


        :param plan_snapshot: The plan_snapshot of this PlanExecution.  # noqa: E501
        :type: str
        """
        if plan_snapshot is not None and len(plan_snapshot) < 1:
            raise ValueError("Invalid value for `plan_snapshot`, length must be greater than or equal to `1`")  # noqa: E501

        self._plan_snapshot = plan_snapshot

    @property
    def password(self):
        """Gets the password of this PlanExecution.  # noqa: E501


        :return: The password of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PlanExecution.


        :param password: The password of this PlanExecution.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 512:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `512`")  # noqa: E501

        self._password = password

    @property
    def public_key(self):
        """Gets the public_key of this PlanExecution.  # noqa: E501


        :return: The public_key of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this PlanExecution.


        :param public_key: The public_key of this PlanExecution.  # noqa: E501
        :type: str
        """
        if public_key is not None and len(public_key) > 4096:
            raise ValueError("Invalid value for `public_key`, length must be less than or equal to `4096`")  # noqa: E501

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this PlanExecution.  # noqa: E501


        :return: The private_key of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this PlanExecution.


        :param private_key: The private_key of this PlanExecution.  # noqa: E501
        :type: str
        """
        if private_key is not None and len(private_key) > 4096:
            raise ValueError("Invalid value for `private_key`, length must be less than or equal to `4096`")  # noqa: E501

        self._private_key = private_key

    @property
    def date_created(self):
        """Gets the date_created of this PlanExecution.  # noqa: E501


        :return: The date_created of this PlanExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PlanExecution.


        :param date_created: The date_created of this PlanExecution.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def plan(self):
        """Gets the plan of this PlanExecution.  # noqa: E501


        :return: The plan of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this PlanExecution.


        :param plan: The plan of this PlanExecution.  # noqa: E501
        :type: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def username(self):
        """Gets the username of this PlanExecution.  # noqa: E501


        :return: The username of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PlanExecution.


        :param username: The username of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def assets(self):
        """Gets the assets of this PlanExecution.  # noqa: E501


        :return: The assets of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PlanExecution.


        :param assets: The assets of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._assets = assets

    @property
    def nodes(self):
        """Gets the nodes of this PlanExecution.  # noqa: E501


        :return: The nodes of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this PlanExecution.


        :param nodes: The nodes of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def result_summary(self):
        """Gets the result_summary of this PlanExecution.  # noqa: E501


        :return: The result_summary of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._result_summary

    @result_summary.setter
    def result_summary(self, result_summary):
        """Sets the result_summary of this PlanExecution.


        :param result_summary: The result_summary of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._result_summary = result_summary

    @property
    def get_password_strategy_display(self):
        """Gets the get_password_strategy_display of this PlanExecution.  # noqa: E501


        :return: The get_password_strategy_display of this PlanExecution.  # noqa: E501
        :rtype: str
        """
        return self._get_password_strategy_display

    @get_password_strategy_display.setter
    def get_password_strategy_display(self, get_password_strategy_display):
        """Sets the get_password_strategy_display of this PlanExecution.


        :param get_password_strategy_display: The get_password_strategy_display of this PlanExecution.  # noqa: E501
        :type: str
        """

        self._get_password_strategy_display = get_password_strategy_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
