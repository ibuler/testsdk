# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommandFilterRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'org_name': 'str',
        'type': 'str',
        'priority': 'int',
        'content': 'str',
        'action': 'int',
        'comment': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'created_by': 'str',
        'filter': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'org_name': 'org_name',
        'type': 'type',
        'priority': 'priority',
        'content': 'content',
        'action': 'action',
        'comment': 'comment',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'created_by': 'created_by',
        'filter': 'filter'
    }

    def __init__(self, id=None, org_id='', org_name=None, type=None, priority=None, content=None, action=None, comment=None, date_created=None, date_updated=None, created_by=None, filter=None):  # noqa: E501
        """CommandFilterRule - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._org_name = None
        self._type = None
        self._priority = None
        self._content = None
        self._action = None
        self._comment = None
        self._date_created = None
        self._date_updated = None
        self._created_by = None
        self._filter = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name
        if type is not None:
            self.type = type
        if priority is not None:
            self.priority = priority
        self.content = content
        if action is not None:
            self.action = action
        if comment is not None:
            self.comment = comment
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if created_by is not None:
            self.created_by = created_by
        self.filter = filter

    @property
    def id(self):
        """Gets the id of this CommandFilterRule.  # noqa: E501


        :return: The id of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommandFilterRule.


        :param id: The id of this CommandFilterRule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this CommandFilterRule.  # noqa: E501


        :return: The org_id of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CommandFilterRule.


        :param org_id: The org_id of this CommandFilterRule.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this CommandFilterRule.  # noqa: E501


        :return: The org_name of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this CommandFilterRule.


        :param org_name: The org_name of this CommandFilterRule.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def type(self):
        """Gets the type of this CommandFilterRule.  # noqa: E501


        :return: The type of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommandFilterRule.


        :param type: The type of this CommandFilterRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["regex", "command"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def priority(self):
        """Gets the priority of this CommandFilterRule.  # noqa: E501

        优先级可选范围为1-100，1最低优先级，100最高优先级  # noqa: E501

        :return: The priority of this CommandFilterRule.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CommandFilterRule.

        优先级可选范围为1-100，1最低优先级，100最高优先级  # noqa: E501

        :param priority: The priority of this CommandFilterRule.  # noqa: E501
        :type: int
        """
        if priority is not None and priority > 100:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")  # noqa: E501
        if priority is not None and priority < 1:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    @property
    def content(self):
        """Gets the content of this CommandFilterRule.  # noqa: E501

        每行一个命令  # noqa: E501

        :return: The content of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CommandFilterRule.

        每行一个命令  # noqa: E501

        :param content: The content of this CommandFilterRule.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        if content is not None and len(content) > 1024:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `1024`")  # noqa: E501
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")  # noqa: E501

        self._content = content

    @property
    def action(self):
        """Gets the action of this CommandFilterRule.  # noqa: E501


        :return: The action of this CommandFilterRule.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CommandFilterRule.


        :param action: The action of this CommandFilterRule.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def comment(self):
        """Gets the comment of this CommandFilterRule.  # noqa: E501


        :return: The comment of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CommandFilterRule.


        :param comment: The comment of this CommandFilterRule.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 64:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `64`")  # noqa: E501

        self._comment = comment

    @property
    def date_created(self):
        """Gets the date_created of this CommandFilterRule.  # noqa: E501


        :return: The date_created of this CommandFilterRule.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CommandFilterRule.


        :param date_created: The date_created of this CommandFilterRule.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this CommandFilterRule.  # noqa: E501


        :return: The date_updated of this CommandFilterRule.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this CommandFilterRule.


        :param date_updated: The date_updated of this CommandFilterRule.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def created_by(self):
        """Gets the created_by of this CommandFilterRule.  # noqa: E501


        :return: The created_by of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CommandFilterRule.


        :param created_by: The created_by of this CommandFilterRule.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 128:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `128`")  # noqa: E501

        self._created_by = created_by

    @property
    def filter(self):
        """Gets the filter of this CommandFilterRule.  # noqa: E501


        :return: The filter of this CommandFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CommandFilterRule.


        :param filter: The filter of this CommandFilterRule.  # noqa: E501
        :type: str
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandFilterRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
