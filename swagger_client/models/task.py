# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'interval': 'int',
        'crontab': 'str',
        'is_periodic': 'bool',
        'callback': 'str',
        'is_deleted': 'bool',
        'comment': 'str',
        'created_by': 'str',
        'date_created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'interval': 'interval',
        'crontab': 'crontab',
        'is_periodic': 'is_periodic',
        'callback': 'callback',
        'is_deleted': 'is_deleted',
        'comment': 'comment',
        'created_by': 'created_by',
        'date_created': 'date_created'
    }

    def __init__(self, id=None, name=None, interval=None, crontab=None, is_periodic=None, callback=None, is_deleted=None, comment=None, created_by='', date_created=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._interval = None
        self._crontab = None
        self._is_periodic = None
        self._callback = None
        self._is_deleted = None
        self._comment = None
        self._created_by = None
        self._date_created = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if interval is not None:
            self.interval = interval
        if crontab is not None:
            self.crontab = crontab
        if is_periodic is not None:
            self.is_periodic = is_periodic
        if callback is not None:
            self.callback = callback
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if comment is not None:
            self.comment = comment
        if created_by is not None:
            self.created_by = created_by
        if date_created is not None:
            self.date_created = date_created

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def interval(self):
        """Gets the interval of this Task.  # noqa: E501

        单位: 秒  # noqa: E501

        :return: The interval of this Task.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Task.

        单位: 秒  # noqa: E501

        :param interval: The interval of this Task.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if interval is not None and interval < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._interval = interval

    @property
    def crontab(self):
        """Gets the crontab of this Task.  # noqa: E501

        5 * * * *  # noqa: E501

        :return: The crontab of this Task.  # noqa: E501
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this Task.

        5 * * * *  # noqa: E501

        :param crontab: The crontab of this Task.  # noqa: E501
        :type: str
        """
        if crontab is not None and len(crontab) > 128:
            raise ValueError("Invalid value for `crontab`, length must be less than or equal to `128`")  # noqa: E501

        self._crontab = crontab

    @property
    def is_periodic(self):
        """Gets the is_periodic of this Task.  # noqa: E501


        :return: The is_periodic of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._is_periodic

    @is_periodic.setter
    def is_periodic(self, is_periodic):
        """Sets the is_periodic of this Task.


        :param is_periodic: The is_periodic of this Task.  # noqa: E501
        :type: bool
        """

        self._is_periodic = is_periodic

    @property
    def callback(self):
        """Gets the callback of this Task.  # noqa: E501


        :return: The callback of this Task.  # noqa: E501
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this Task.


        :param callback: The callback of this Task.  # noqa: E501
        :type: str
        """
        if callback is not None and len(callback) > 128:
            raise ValueError("Invalid value for `callback`, length must be less than or equal to `128`")  # noqa: E501

        self._callback = callback

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Task.  # noqa: E501


        :return: The is_deleted of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Task.


        :param is_deleted: The is_deleted of this Task.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def comment(self):
        """Gets the comment of this Task.  # noqa: E501


        :return: The comment of this Task.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Task.


        :param comment: The comment of this Task.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by(self):
        """Gets the created_by of this Task.  # noqa: E501


        :return: The created_by of this Task.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Task.


        :param created_by: The created_by of this Task.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 128:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `128`")  # noqa: E501

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this Task.  # noqa: E501


        :return: The date_created of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Task.


        :param date_created: The date_created of this Task.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
