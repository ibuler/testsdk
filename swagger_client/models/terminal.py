# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Terminal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'remote_addr': 'str',
        'http_port': 'int',
        'ssh_port': 'int',
        'comment': 'str',
        'is_accepted': 'bool',
        'is_active': 'str',
        'session_online': 'str',
        'is_alive': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'remote_addr': 'remote_addr',
        'http_port': 'http_port',
        'ssh_port': 'ssh_port',
        'comment': 'comment',
        'is_accepted': 'is_accepted',
        'is_active': 'is_active',
        'session_online': 'session_online',
        'is_alive': 'is_alive'
    }

    def __init__(self, id=None, name=None, remote_addr=None, http_port=None, ssh_port=None, comment=None, is_accepted=None, is_active=None, session_online=None, is_alive=None):  # noqa: E501
        """Terminal - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._remote_addr = None
        self._http_port = None
        self._ssh_port = None
        self._comment = None
        self._is_accepted = None
        self._is_active = None
        self._session_online = None
        self._is_alive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if remote_addr is not None:
            self.remote_addr = remote_addr
        if http_port is not None:
            self.http_port = http_port
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if comment is not None:
            self.comment = comment
        if is_accepted is not None:
            self.is_accepted = is_accepted
        if is_active is not None:
            self.is_active = is_active
        if session_online is not None:
            self.session_online = session_online
        if is_alive is not None:
            self.is_alive = is_alive

    @property
    def id(self):
        """Gets the id of this Terminal.  # noqa: E501


        :return: The id of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Terminal.


        :param id: The id of this Terminal.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Terminal.  # noqa: E501


        :return: The name of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Terminal.


        :param name: The name of this Terminal.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def remote_addr(self):
        """Gets the remote_addr of this Terminal.  # noqa: E501


        :return: The remote_addr of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this Terminal.


        :param remote_addr: The remote_addr of this Terminal.  # noqa: E501
        :type: str
        """
        if remote_addr is not None and len(remote_addr) > 128:
            raise ValueError("Invalid value for `remote_addr`, length must be less than or equal to `128`")  # noqa: E501

        self._remote_addr = remote_addr

    @property
    def http_port(self):
        """Gets the http_port of this Terminal.  # noqa: E501


        :return: The http_port of this Terminal.  # noqa: E501
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this Terminal.


        :param http_port: The http_port of this Terminal.  # noqa: E501
        :type: int
        """
        if http_port is not None and http_port > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if http_port is not None and http_port < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._http_port = http_port

    @property
    def ssh_port(self):
        """Gets the ssh_port of this Terminal.  # noqa: E501


        :return: The ssh_port of this Terminal.  # noqa: E501
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this Terminal.


        :param ssh_port: The ssh_port of this Terminal.  # noqa: E501
        :type: int
        """
        if ssh_port is not None and ssh_port > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `ssh_port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if ssh_port is not None and ssh_port < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `ssh_port`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._ssh_port = ssh_port

    @property
    def comment(self):
        """Gets the comment of this Terminal.  # noqa: E501


        :return: The comment of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Terminal.


        :param comment: The comment of this Terminal.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def is_accepted(self):
        """Gets the is_accepted of this Terminal.  # noqa: E501


        :return: The is_accepted of this Terminal.  # noqa: E501
        :rtype: bool
        """
        return self._is_accepted

    @is_accepted.setter
    def is_accepted(self, is_accepted):
        """Sets the is_accepted of this Terminal.


        :param is_accepted: The is_accepted of this Terminal.  # noqa: E501
        :type: bool
        """

        self._is_accepted = is_accepted

    @property
    def is_active(self):
        """Gets the is_active of this Terminal.  # noqa: E501


        :return: The is_active of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Terminal.


        :param is_active: The is_active of this Terminal.  # noqa: E501
        :type: str
        """

        self._is_active = is_active

    @property
    def session_online(self):
        """Gets the session_online of this Terminal.  # noqa: E501


        :return: The session_online of this Terminal.  # noqa: E501
        :rtype: str
        """
        return self._session_online

    @session_online.setter
    def session_online(self, session_online):
        """Sets the session_online of this Terminal.


        :param session_online: The session_online of this Terminal.  # noqa: E501
        :type: str
        """

        self._session_online = session_online

    @property
    def is_alive(self):
        """Gets the is_alive of this Terminal.  # noqa: E501


        :return: The is_alive of this Terminal.  # noqa: E501
        :rtype: bool
        """
        return self._is_alive

    @is_alive.setter
    def is_alive(self, is_alive):
        """Sets the is_alive of this Terminal.


        :param is_alive: The is_alive of this Terminal.  # noqa: E501
        :type: bool
        """

        self._is_alive = is_alive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Terminal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
