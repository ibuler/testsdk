# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssetSystemUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'username': 'str',
        'priority': 'int',
        'protocol': 'str',
        'login_mode': 'str',
        'actions': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'priority': 'priority',
        'protocol': 'protocol',
        'login_mode': 'login_mode',
        'actions': 'actions'
    }

    def __init__(self, id=None, name=None, username=None, priority=None, protocol=None, login_mode=None, actions=None):  # noqa: E501
        """AssetSystemUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._username = None
        self._priority = None
        self._protocol = None
        self._login_mode = None
        self._actions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if priority is not None:
            self.priority = priority
        if protocol is not None:
            self.protocol = protocol
        if login_mode is not None:
            self.login_mode = login_mode
        if actions is not None:
            self.actions = actions

    @property
    def id(self):
        """Gets the id of this AssetSystemUser.  # noqa: E501


        :return: The id of this AssetSystemUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetSystemUser.


        :param id: The id of this AssetSystemUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AssetSystemUser.  # noqa: E501


        :return: The name of this AssetSystemUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetSystemUser.


        :param name: The name of this AssetSystemUser.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this AssetSystemUser.  # noqa: E501


        :return: The username of this AssetSystemUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AssetSystemUser.


        :param username: The username of this AssetSystemUser.  # noqa: E501
        :type: str
        """
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def priority(self):
        """Gets the priority of this AssetSystemUser.  # noqa: E501


        :return: The priority of this AssetSystemUser.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AssetSystemUser.


        :param priority: The priority of this AssetSystemUser.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this AssetSystemUser.  # noqa: E501


        :return: The protocol of this AssetSystemUser.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this AssetSystemUser.


        :param protocol: The protocol of this AssetSystemUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssh", "rdp", "telnet", "vnc"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def login_mode(self):
        """Gets the login_mode of this AssetSystemUser.  # noqa: E501


        :return: The login_mode of this AssetSystemUser.  # noqa: E501
        :rtype: str
        """
        return self._login_mode

    @login_mode.setter
    def login_mode(self, login_mode):
        """Sets the login_mode of this AssetSystemUser.


        :param login_mode: The login_mode of this AssetSystemUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if login_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `login_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(login_mode, allowed_values)
            )

        self._login_mode = login_mode

    @property
    def actions(self):
        """Gets the actions of this AssetSystemUser.  # noqa: E501


        :return: The actions of this AssetSystemUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AssetSystemUser.


        :param actions: The actions of this AssetSystemUser.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["all", "connect", "upload_file", "download_file", "updownload"]  # noqa: E501
        if not set(actions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `actions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(actions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetSystemUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
