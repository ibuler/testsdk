# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user': 'str',
        'asset': 'str',
        'system_user': 'str',
        'login_from': 'str',
        'login_from_display': 'str',
        'remote_addr': 'str',
        'is_finished': 'bool',
        'has_replay': 'bool',
        'can_replay': 'str',
        'protocol': 'str',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'terminal': 'str',
        'command_amount': 'int',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'asset': 'asset',
        'system_user': 'system_user',
        'login_from': 'login_from',
        'login_from_display': 'login_from_display',
        'remote_addr': 'remote_addr',
        'is_finished': 'is_finished',
        'has_replay': 'has_replay',
        'can_replay': 'can_replay',
        'protocol': 'protocol',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'terminal': 'terminal',
        'command_amount': 'command_amount',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, user=None, asset=None, system_user=None, login_from=None, login_from_display=None, remote_addr=None, is_finished=None, has_replay=None, can_replay=None, protocol=None, date_start=None, date_end=None, terminal=None, command_amount=None, org_id='00000000-0000-0000-0000-000000000000', org_name=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user = None
        self._asset = None
        self._system_user = None
        self._login_from = None
        self._login_from_display = None
        self._remote_addr = None
        self._is_finished = None
        self._has_replay = None
        self._can_replay = None
        self._protocol = None
        self._date_start = None
        self._date_end = None
        self._terminal = None
        self._command_amount = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user = user
        self.asset = asset
        self.system_user = system_user
        if login_from is not None:
            self.login_from = login_from
        if login_from_display is not None:
            self.login_from_display = login_from_display
        if remote_addr is not None:
            self.remote_addr = remote_addr
        if is_finished is not None:
            self.is_finished = is_finished
        if has_replay is not None:
            self.has_replay = has_replay
        if can_replay is not None:
            self.can_replay = can_replay
        if protocol is not None:
            self.protocol = protocol
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if terminal is not None:
            self.terminal = terminal
        if command_amount is not None:
            self.command_amount = command_amount
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501


        :return: The id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this Session.  # noqa: E501


        :return: The user of this Session.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Session.


        :param user: The user of this Session.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501
        if user is not None and len(user) > 128:
            raise ValueError("Invalid value for `user`, length must be less than or equal to `128`")  # noqa: E501
        if user is not None and len(user) < 1:
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `1`")  # noqa: E501

        self._user = user

    @property
    def asset(self):
        """Gets the asset of this Session.  # noqa: E501


        :return: The asset of this Session.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Session.


        :param asset: The asset of this Session.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501
        if asset is not None and len(asset) > 1024:
            raise ValueError("Invalid value for `asset`, length must be less than or equal to `1024`")  # noqa: E501
        if asset is not None and len(asset) < 1:
            raise ValueError("Invalid value for `asset`, length must be greater than or equal to `1`")  # noqa: E501

        self._asset = asset

    @property
    def system_user(self):
        """Gets the system_user of this Session.  # noqa: E501


        :return: The system_user of this Session.  # noqa: E501
        :rtype: str
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this Session.


        :param system_user: The system_user of this Session.  # noqa: E501
        :type: str
        """
        if system_user is None:
            raise ValueError("Invalid value for `system_user`, must not be `None`")  # noqa: E501
        if system_user is not None and len(system_user) > 128:
            raise ValueError("Invalid value for `system_user`, length must be less than or equal to `128`")  # noqa: E501
        if system_user is not None and len(system_user) < 1:
            raise ValueError("Invalid value for `system_user`, length must be greater than or equal to `1`")  # noqa: E501

        self._system_user = system_user

    @property
    def login_from(self):
        """Gets the login_from of this Session.  # noqa: E501


        :return: The login_from of this Session.  # noqa: E501
        :rtype: str
        """
        return self._login_from

    @login_from.setter
    def login_from(self, login_from):
        """Sets the login_from of this Session.


        :param login_from: The login_from of this Session.  # noqa: E501
        :type: str
        """
        allowed_values = ["ST", "WT"]  # noqa: E501
        if login_from not in allowed_values:
            raise ValueError(
                "Invalid value for `login_from` ({0}), must be one of {1}"  # noqa: E501
                .format(login_from, allowed_values)
            )

        self._login_from = login_from

    @property
    def login_from_display(self):
        """Gets the login_from_display of this Session.  # noqa: E501


        :return: The login_from_display of this Session.  # noqa: E501
        :rtype: str
        """
        return self._login_from_display

    @login_from_display.setter
    def login_from_display(self, login_from_display):
        """Sets the login_from_display of this Session.


        :param login_from_display: The login_from_display of this Session.  # noqa: E501
        :type: str
        """

        self._login_from_display = login_from_display

    @property
    def remote_addr(self):
        """Gets the remote_addr of this Session.  # noqa: E501


        :return: The remote_addr of this Session.  # noqa: E501
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this Session.


        :param remote_addr: The remote_addr of this Session.  # noqa: E501
        :type: str
        """
        if remote_addr is not None and len(remote_addr) > 15:
            raise ValueError("Invalid value for `remote_addr`, length must be less than or equal to `15`")  # noqa: E501

        self._remote_addr = remote_addr

    @property
    def is_finished(self):
        """Gets the is_finished of this Session.  # noqa: E501


        :return: The is_finished of this Session.  # noqa: E501
        :rtype: bool
        """
        return self._is_finished

    @is_finished.setter
    def is_finished(self, is_finished):
        """Sets the is_finished of this Session.


        :param is_finished: The is_finished of this Session.  # noqa: E501
        :type: bool
        """

        self._is_finished = is_finished

    @property
    def has_replay(self):
        """Gets the has_replay of this Session.  # noqa: E501


        :return: The has_replay of this Session.  # noqa: E501
        :rtype: bool
        """
        return self._has_replay

    @has_replay.setter
    def has_replay(self, has_replay):
        """Sets the has_replay of this Session.


        :param has_replay: The has_replay of this Session.  # noqa: E501
        :type: bool
        """

        self._has_replay = has_replay

    @property
    def can_replay(self):
        """Gets the can_replay of this Session.  # noqa: E501


        :return: The can_replay of this Session.  # noqa: E501
        :rtype: str
        """
        return self._can_replay

    @can_replay.setter
    def can_replay(self, can_replay):
        """Sets the can_replay of this Session.


        :param can_replay: The can_replay of this Session.  # noqa: E501
        :type: str
        """

        self._can_replay = can_replay

    @property
    def protocol(self):
        """Gets the protocol of this Session.  # noqa: E501


        :return: The protocol of this Session.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Session.


        :param protocol: The protocol of this Session.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssh", "rdp", "vnc"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def date_start(self):
        """Gets the date_start of this Session.  # noqa: E501


        :return: The date_start of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this Session.


        :param date_start: The date_start of this Session.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this Session.  # noqa: E501


        :return: The date_end of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this Session.


        :param date_end: The date_end of this Session.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def terminal(self):
        """Gets the terminal of this Session.  # noqa: E501


        :return: The terminal of this Session.  # noqa: E501
        :rtype: str
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this Session.


        :param terminal: The terminal of this Session.  # noqa: E501
        :type: str
        """

        self._terminal = terminal

    @property
    def command_amount(self):
        """Gets the command_amount of this Session.  # noqa: E501


        :return: The command_amount of this Session.  # noqa: E501
        :rtype: int
        """
        return self._command_amount

    @command_amount.setter
    def command_amount(self, command_amount):
        """Sets the command_amount of this Session.


        :param command_amount: The command_amount of this Session.  # noqa: E501
        :type: int
        """

        self._command_amount = command_amount

    @property
    def org_id(self):
        """Gets the org_id of this Session.  # noqa: E501


        :return: The org_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Session.


        :param org_id: The org_id of this Session.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this Session.  # noqa: E501


        :return: The org_name of this Session.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this Session.


        :param org_name: The org_name of this Session.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
