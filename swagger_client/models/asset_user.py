# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.connectivity import Connectivity  # noqa: F401,E501


class AssetUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hostname': 'str',
        'ip': 'str',
        'username': 'str',
        'password': 'str',
        'asset': 'str',
        'version': 'int',
        'is_latest': 'bool',
        'connectivity': 'Connectivity',
        'backend': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'private_key': 'str',
        'public_key': 'str',
        'org_id': 'str',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'hostname': 'hostname',
        'ip': 'ip',
        'username': 'username',
        'password': 'password',
        'asset': 'asset',
        'version': 'version',
        'is_latest': 'is_latest',
        'connectivity': 'connectivity',
        'backend': 'backend',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'private_key': 'private_key',
        'public_key': 'public_key',
        'org_id': 'org_id',
        'org_name': 'org_name'
    }

    def __init__(self, id=None, hostname=None, ip=None, username=None, password=None, asset=None, version=None, is_latest=None, connectivity=None, backend=None, date_created=None, date_updated=None, private_key=None, public_key=None, org_id='', org_name=None):  # noqa: E501
        """AssetUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._hostname = None
        self._ip = None
        self._username = None
        self._password = None
        self._asset = None
        self._version = None
        self._is_latest = None
        self._connectivity = None
        self._backend = None
        self._date_created = None
        self._date_updated = None
        self._private_key = None
        self._public_key = None
        self._org_id = None
        self._org_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hostname is not None:
            self.hostname = hostname
        if ip is not None:
            self.ip = ip
        self.username = username
        if password is not None:
            self.password = password
        self.asset = asset
        if version is not None:
            self.version = version
        if is_latest is not None:
            self.is_latest = is_latest
        if connectivity is not None:
            self.connectivity = connectivity
        if backend is not None:
            self.backend = backend
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if private_key is not None:
            self.private_key = private_key
        if public_key is not None:
            self.public_key = public_key
        if org_id is not None:
            self.org_id = org_id
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this AssetUser.  # noqa: E501


        :return: The id of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetUser.


        :param id: The id of this AssetUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hostname(self):
        """Gets the hostname of this AssetUser.  # noqa: E501


        :return: The hostname of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AssetUser.


        :param hostname: The hostname of this AssetUser.  # noqa: E501
        :type: str
        """
        if hostname is not None and len(hostname) < 1:
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `1`")  # noqa: E501

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this AssetUser.  # noqa: E501


        :return: The ip of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AssetUser.


        :param ip: The ip of this AssetUser.  # noqa: E501
        :type: str
        """
        if ip is not None and len(ip) < 1:
            raise ValueError("Invalid value for `ip`, length must be greater than or equal to `1`")  # noqa: E501

        self._ip = ip

    @property
    def username(self):
        """Gets the username of this AssetUser.  # noqa: E501


        :return: The username of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AssetUser.


        :param username: The username of this AssetUser.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and not re.search('^[0-9a-zA-Z_@\\-\\.]*$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[0-9a-zA-Z_@\\-\\.]*$/`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this AssetUser.  # noqa: E501


        :return: The password of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AssetUser.


        :param password: The password of this AssetUser.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 512:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `512`")  # noqa: E501

        self._password = password

    @property
    def asset(self):
        """Gets the asset of this AssetUser.  # noqa: E501


        :return: The asset of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetUser.


        :param asset: The asset of this AssetUser.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def version(self):
        """Gets the version of this AssetUser.  # noqa: E501


        :return: The version of this AssetUser.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AssetUser.


        :param version: The version of this AssetUser.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def is_latest(self):
        """Gets the is_latest of this AssetUser.  # noqa: E501


        :return: The is_latest of this AssetUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this AssetUser.


        :param is_latest: The is_latest of this AssetUser.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def connectivity(self):
        """Gets the connectivity of this AssetUser.  # noqa: E501


        :return: The connectivity of this AssetUser.  # noqa: E501
        :rtype: Connectivity
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this AssetUser.


        :param connectivity: The connectivity of this AssetUser.  # noqa: E501
        :type: Connectivity
        """

        self._connectivity = connectivity

    @property
    def backend(self):
        """Gets the backend of this AssetUser.  # noqa: E501


        :return: The backend of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this AssetUser.


        :param backend: The backend of this AssetUser.  # noqa: E501
        :type: str
        """
        if backend is not None and len(backend) < 1:
            raise ValueError("Invalid value for `backend`, length must be greater than or equal to `1`")  # noqa: E501

        self._backend = backend

    @property
    def date_created(self):
        """Gets the date_created of this AssetUser.  # noqa: E501


        :return: The date_created of this AssetUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AssetUser.


        :param date_created: The date_created of this AssetUser.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this AssetUser.  # noqa: E501


        :return: The date_updated of this AssetUser.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AssetUser.


        :param date_updated: The date_updated of this AssetUser.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def private_key(self):
        """Gets the private_key of this AssetUser.  # noqa: E501


        :return: The private_key of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this AssetUser.


        :param private_key: The private_key of this AssetUser.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this AssetUser.  # noqa: E501


        :return: The public_key of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AssetUser.


        :param public_key: The public_key of this AssetUser.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def org_id(self):
        """Gets the org_id of this AssetUser.  # noqa: E501


        :return: The org_id of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AssetUser.


        :param org_id: The org_id of this AssetUser.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this AssetUser.  # noqa: E501


        :return: The org_name of this AssetUser.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this AssetUser.


        :param org_name: The org_name of this AssetUser.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
