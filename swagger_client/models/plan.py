# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Plan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'org_id': 'str',
        'name': 'str',
        'username': 'str',
        'is_periodic': 'bool',
        'interval': 'int',
        'crontab': 'str',
        'password_strategy': 'str',
        'password_rules': 'str',
        'password': 'str',
        'private_key': 'str',
        'public_key': 'str',
        'comment': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'created_by': 'str',
        'assets': 'list[str]',
        'nodes': 'list[str]',
        'get_periodic_perform_display': 'str',
        'get_password_strategy_display': 'str',
        'run_times': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'name': 'name',
        'username': 'username',
        'is_periodic': 'is_periodic',
        'interval': 'interval',
        'crontab': 'crontab',
        'password_strategy': 'password_strategy',
        'password_rules': 'password_rules',
        'password': 'password',
        'private_key': 'private_key',
        'public_key': 'public_key',
        'comment': 'comment',
        'date_created': 'date_created',
        'date_updated': 'date_updated',
        'created_by': 'created_by',
        'assets': 'assets',
        'nodes': 'nodes',
        'get_periodic_perform_display': 'get_periodic_perform_display',
        'get_password_strategy_display': 'get_password_strategy_display',
        'run_times': 'run_times'
    }

    def __init__(self, id=None, org_id='', name=None, username=None, is_periodic=None, interval=None, crontab=None, password_strategy=None, password_rules=None, password=None, private_key=None, public_key=None, comment=None, date_created=None, date_updated=None, created_by=None, assets=None, nodes=None, get_periodic_perform_display=None, get_password_strategy_display=None, run_times=None):  # noqa: E501
        """Plan - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._name = None
        self._username = None
        self._is_periodic = None
        self._interval = None
        self._crontab = None
        self._password_strategy = None
        self._password_rules = None
        self._password = None
        self._private_key = None
        self._public_key = None
        self._comment = None
        self._date_created = None
        self._date_updated = None
        self._created_by = None
        self._assets = None
        self._nodes = None
        self._get_periodic_perform_display = None
        self._get_password_strategy_display = None
        self._run_times = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        self.name = name
        self.username = username
        if is_periodic is not None:
            self.is_periodic = is_periodic
        if interval is not None:
            self.interval = interval
        if crontab is not None:
            self.crontab = crontab
        if password_strategy is not None:
            self.password_strategy = password_strategy
        if password_rules is not None:
            self.password_rules = password_rules
        if password is not None:
            self.password = password
        if private_key is not None:
            self.private_key = private_key
        if public_key is not None:
            self.public_key = public_key
        if comment is not None:
            self.comment = comment
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if created_by is not None:
            self.created_by = created_by
        if assets is not None:
            self.assets = assets
        if nodes is not None:
            self.nodes = nodes
        if get_periodic_perform_display is not None:
            self.get_periodic_perform_display = get_periodic_perform_display
        if get_password_strategy_display is not None:
            self.get_password_strategy_display = get_password_strategy_display
        if run_times is not None:
            self.run_times = run_times

    @property
    def id(self):
        """Gets the id of this Plan.  # noqa: E501


        :return: The id of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.


        :param id: The id of this Plan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this Plan.  # noqa: E501


        :return: The org_id of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Plan.


        :param org_id: The org_id of this Plan.  # noqa: E501
        :type: str
        """
        if org_id is not None and len(org_id) > 36:
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `36`")  # noqa: E501

        self._org_id = org_id

    @property
    def name(self):
        """Gets the name of this Plan.  # noqa: E501


        :return: The name of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.


        :param name: The name of this Plan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this Plan.  # noqa: E501


        :return: The username of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Plan.


        :param username: The username of this Plan.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) > 32:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `32`")  # noqa: E501
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501
        if username is not None and not re.search('^[0-9a-zA-Z_@\\-\\.]*$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[0-9a-zA-Z_@\\-\\.]*$/`")  # noqa: E501

        self._username = username

    @property
    def is_periodic(self):
        """Gets the is_periodic of this Plan.  # noqa: E501


        :return: The is_periodic of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._is_periodic

    @is_periodic.setter
    def is_periodic(self, is_periodic):
        """Sets the is_periodic of this Plan.


        :param is_periodic: The is_periodic of this Plan.  # noqa: E501
        :type: bool
        """

        self._is_periodic = is_periodic

    @property
    def interval(self):
        """Gets the interval of this Plan.  # noqa: E501


        :return: The interval of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Plan.


        :param interval: The interval of this Plan.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 8760:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `8760`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def crontab(self):
        """Gets the crontab of this Plan.  # noqa: E501


        :return: The crontab of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this Plan.


        :param crontab: The crontab of this Plan.  # noqa: E501
        :type: str
        """
        if crontab is not None and len(crontab) > 128:
            raise ValueError("Invalid value for `crontab`, length must be less than or equal to `128`")  # noqa: E501

        self._crontab = crontab

    @property
    def password_strategy(self):
        """Gets the password_strategy of this Plan.  # noqa: E501


        :return: The password_strategy of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._password_strategy

    @password_strategy.setter
    def password_strategy(self, password_strategy):
        """Sets the password_strategy of this Plan.


        :param password_strategy: The password_strategy of this Plan.  # noqa: E501
        :type: str
        """
        allowed_values = ["custom", "random_one", "random_all"]  # noqa: E501
        if password_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `password_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(password_strategy, allowed_values)
            )

        self._password_strategy = password_strategy

    @property
    def password_rules(self):
        """Gets the password_rules of this Plan.  # noqa: E501


        :return: The password_rules of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._password_rules

    @password_rules.setter
    def password_rules(self, password_rules):
        """Sets the password_rules of this Plan.


        :param password_rules: The password_rules of this Plan.  # noqa: E501
        :type: str
        """
        if password_rules is not None and len(password_rules) > 2048:
            raise ValueError("Invalid value for `password_rules`, length must be less than or equal to `2048`")  # noqa: E501
        if password_rules is not None and len(password_rules) < 1:
            raise ValueError("Invalid value for `password_rules`, length must be greater than or equal to `1`")  # noqa: E501

        self._password_rules = password_rules

    @property
    def password(self):
        """Gets the password of this Plan.  # noqa: E501


        :return: The password of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Plan.


        :param password: The password of this Plan.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 512:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `512`")  # noqa: E501

        self._password = password

    @property
    def private_key(self):
        """Gets the private_key of this Plan.  # noqa: E501


        :return: The private_key of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Plan.


        :param private_key: The private_key of this Plan.  # noqa: E501
        :type: str
        """
        if private_key is not None and len(private_key) > 4096:
            raise ValueError("Invalid value for `private_key`, length must be less than or equal to `4096`")  # noqa: E501

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this Plan.  # noqa: E501


        :return: The public_key of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Plan.


        :param public_key: The public_key of this Plan.  # noqa: E501
        :type: str
        """
        if public_key is not None and len(public_key) > 4096:
            raise ValueError("Invalid value for `public_key`, length must be less than or equal to `4096`")  # noqa: E501

        self._public_key = public_key

    @property
    def comment(self):
        """Gets the comment of this Plan.  # noqa: E501


        :return: The comment of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Plan.


        :param comment: The comment of this Plan.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def date_created(self):
        """Gets the date_created of this Plan.  # noqa: E501


        :return: The date_created of this Plan.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Plan.


        :param date_created: The date_created of this Plan.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this Plan.  # noqa: E501


        :return: The date_updated of this Plan.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Plan.


        :param date_updated: The date_updated of this Plan.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def created_by(self):
        """Gets the created_by of this Plan.  # noqa: E501


        :return: The created_by of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Plan.


        :param created_by: The created_by of this Plan.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._created_by = created_by

    @property
    def assets(self):
        """Gets the assets of this Plan.  # noqa: E501


        :return: The assets of this Plan.  # noqa: E501
        :rtype: list[str]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Plan.


        :param assets: The assets of this Plan.  # noqa: E501
        :type: list[str]
        """

        self._assets = assets

    @property
    def nodes(self):
        """Gets the nodes of this Plan.  # noqa: E501


        :return: The nodes of this Plan.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Plan.


        :param nodes: The nodes of this Plan.  # noqa: E501
        :type: list[str]
        """

        self._nodes = nodes

    @property
    def get_periodic_perform_display(self):
        """Gets the get_periodic_perform_display of this Plan.  # noqa: E501


        :return: The get_periodic_perform_display of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._get_periodic_perform_display

    @get_periodic_perform_display.setter
    def get_periodic_perform_display(self, get_periodic_perform_display):
        """Sets the get_periodic_perform_display of this Plan.


        :param get_periodic_perform_display: The get_periodic_perform_display of this Plan.  # noqa: E501
        :type: str
        """

        self._get_periodic_perform_display = get_periodic_perform_display

    @property
    def get_password_strategy_display(self):
        """Gets the get_password_strategy_display of this Plan.  # noqa: E501


        :return: The get_password_strategy_display of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._get_password_strategy_display

    @get_password_strategy_display.setter
    def get_password_strategy_display(self, get_password_strategy_display):
        """Sets the get_password_strategy_display of this Plan.


        :param get_password_strategy_display: The get_password_strategy_display of this Plan.  # noqa: E501
        :type: str
        """

        self._get_password_strategy_display = get_password_strategy_display

    @property
    def run_times(self):
        """Gets the run_times of this Plan.  # noqa: E501


        :return: The run_times of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._run_times

    @run_times.setter
    def run_times(self, run_times):
        """Sets the run_times of this Plan.


        :param run_times: The run_times of this Plan.  # noqa: E501
        :type: str
        """

        self._run_times = run_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
