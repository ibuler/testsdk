# coding: utf-8

"""
    Jumpserver API Docs

    Jumpserver Restful api docs  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@fit2cloud.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssetsSystemUsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assets_v1_system_users_asset_auth_info_read(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_auth_info_read  # noqa: E501

        Get system user with asset auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_auth_info_read(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_asset_auth_info_read_with_http_info(aid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_asset_auth_info_read_with_http_info(aid, id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_asset_auth_info_read_with_http_info(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_auth_info_read  # noqa: E501

        Get system user with asset auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_auth_info_read_with_http_info(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aid', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_asset_auth_info_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aid' is set
        if ('aid' not in params or
                params['aid'] is None):
            raise ValueError("Missing the required parameter `aid` when calling `assets_v1_system_users_asset_auth_info_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_asset_auth_info_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aid' in params:
            path_params['aid'] = params['aid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/asset/{aid}/auth-info/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUserAuth',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_asset_push_read(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_push_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_push_read(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: TaskID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_asset_push_read_with_http_info(aid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_asset_push_read_with_http_info(aid, id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_asset_push_read_with_http_info(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_push_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_push_read_with_http_info(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: TaskID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aid', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_asset_push_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aid' is set
        if ('aid' not in params or
                params['aid'] is None):
            raise ValueError("Missing the required parameter `aid` when calling `assets_v1_system_users_asset_push_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_asset_push_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aid' in params:
            path_params['aid'] = params['aid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/asset/{aid}/push/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskID',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_asset_test_read(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_test_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_test_read(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: TaskID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_asset_test_read_with_http_info(aid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_asset_test_read_with_http_info(aid, id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_asset_test_read_with_http_info(self, aid, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_asset_test_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_asset_test_read_with_http_info(aid, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str aid: (required)
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: TaskID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aid', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_asset_test_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aid' is set
        if ('aid' not in params or
                params['aid'] is None):
            raise ValueError("Missing the required parameter `aid` when calling `assets_v1_system_users_asset_test_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_asset_test_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aid' in params:
            path_params['aid'] = params['aid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/asset/{aid}/test/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskID',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_assets_list(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_assets_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_assets_list(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_assets_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_assets_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_assets_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_assets_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_assets_list_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'search', 'order', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_assets_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_assets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/assets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_auth_info_delete(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_delete  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_auth_info_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_auth_info_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_auth_info_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_delete  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_auth_info_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_auth_info_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/auth-info/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_auth_info_partial_update(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_partial_update  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_partial_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUserAuth data: (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_auth_info_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_auth_info_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_auth_info_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_partial_update  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_partial_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUserAuth data: (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_auth_info_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_auth_info_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_auth_info_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/auth-info/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUserAuth',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_auth_info_read(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_read  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_auth_info_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_auth_info_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_auth_info_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_read  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_auth_info_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_auth_info_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/auth-info/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUserAuth',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_auth_info_update(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_update  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUserAuth data: (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_auth_info_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_auth_info_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_auth_info_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_auth_info_update  # noqa: E501

        Get system user auth info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_auth_info_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUserAuth data: (required)
        :return: SystemUserAuth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_auth_info_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_auth_info_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_auth_info_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/auth-info/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUserAuth',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_cmd_filter_rules_list(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_cmd_filter_rules_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_cmd_filter_rules_list(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :return: list[CommandFilterRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_cmd_filter_rules_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_cmd_filter_rules_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_cmd_filter_rules_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_cmd_filter_rules_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_cmd_filter_rules_list_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :return: list[CommandFilterRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'search', 'order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_cmd_filter_rules_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_cmd_filter_rules_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/cmd-filter-rules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommandFilterRule]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_connective_read(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_connective_read  # noqa: E501

        Push system user to cluster assets api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_connective_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: CeleryTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_connective_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_connective_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_connective_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_connective_read  # noqa: E501

        Push system user to cluster assets api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_connective_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: CeleryTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_connective_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_connective_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/connective/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CeleryTask',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_create(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_create  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_create(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_create  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_create_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_delete(self, **kwargs):  # noqa: E501
        """assets_v1_system_users_delete  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_delete(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str username: 
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_delete_with_http_info(self, **kwargs):  # noqa: E501
        """assets_v1_system_users_delete  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_delete_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str username: 
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'username', 'search', 'order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_delete_0(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_delete_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_delete_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_delete_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_delete_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_delete_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_delete_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_delete_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_list(self, **kwargs):  # noqa: E501
        """assets_v1_system_users_list  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str username: 
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_list_with_http_info(self, **kwargs):  # noqa: E501
        """assets_v1_system_users_list  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str username: 
        :param str search: A search term.
        :param str order: Which field to use when ordering the results.
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'username', 'search', 'order', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_partial_update(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_partial_update  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_partial_update(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_partial_update_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_partial_update_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_partial_update_with_http_info(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_partial_update  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_partial_update_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_partial_update_0(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_partial_update_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_partial_update_0(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_partial_update_0_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_partial_update_0_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_partial_update_0_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_partial_update_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_partial_update_0_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_partial_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_partial_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_partial_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_push_read(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_push_read  # noqa: E501

        Push system user to cluster assets api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_push_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: CeleryTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_push_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_push_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_push_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_push_read  # noqa: E501

        Push system user to cluster assets api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_push_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: CeleryTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_push_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_push_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/push/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CeleryTask',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_read(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_read  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_v1_system_users_read  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_update(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_update  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_update(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_update_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_update_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_update_with_http_info(self, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_update  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_update_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_v1_system_users_update_0(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_update_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_update_0(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.assets_v1_system_users_update_0_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_v1_system_users_update_0_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def assets_v1_system_users_update_0_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """assets_v1_system_users_update_0  # noqa: E501

        System user api set, for add,delete,update,list,retrieve resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.assets_v1_system_users_update_0_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this 系统用户. (required)
        :param SystemUser data: (required)
        :return: SystemUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_v1_system_users_update_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_v1_system_users_update_0`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `assets_v1_system_users_update_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/csv', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/assets/v1/system-users/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemUser',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
